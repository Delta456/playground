{
  "version": 3,
  "sources": ["../src/v-hint.ts", "../src/v.ts", "../src/Repositories/SharedCodeRepository.ts", "../src/Repositories/TextCodeRepository.ts", "../src/Repositories/LocalCodeRepository.ts", "../src/Repositories/Base64CodeRepository.ts", "../src/Repositories/GithubGistCodeRepository.ts", "../src/Repositories/CodeRepositoryManager.ts", "../src/QueryParams.ts", "../src/HelpManager.ts", "../src/clipboard_util.ts", "../src/Terminal/Terminal.ts", "../src/RunConfigurationManager/RunConfigurationManager.ts", "../src/Examples/examples.ts", "../src/Editor/Editor.ts", "../src/themes/Dark.ts", "../src/themes/Light.ts", "../src/ThemeManager/ThemeManager.ts", "../src/Examples/ExamplesManager.ts", "../src/CodeRunner/CodeRunner.ts", "../src/Playground.ts", "../src/main.ts"],
  "sourcesContent": ["import {atoms, builtinTypes, keywords, pseudoKeywords} from \"./v\"\nimport {Editor, Position, Token} from \"codemirror\"\n\n// @ts-ignore\nconst Pos = CodeMirror.Pos\n\n/**\n * Describe a completion variant.\n */\ninterface CompletionVariant {\n    /**\n     * The text to be matched and inserted.\n     */\n    text: string,\n\n    /**\n     * The text to be displayed in the completion list.\n     */\n    displayText: string,\n\n    /**\n     * The class name to be applied to the completion list item.\n     * Used to style the completion list item.\n     */\n    className: string\n}\n\n/**\n * Describe a completions variants.\n */\ninterface CompletionVariants {\n    from: Position;\n    to: Position;\n    list: Array<CompletionVariant | string>;\n}\n\n/**\n * Some base builtin modules.\n */\nconst baseModules = [\n    \"arrays\",\n    \"benchmark\", \"bitfield\",\n    \"cli\", \"clipboard\", \"compress\", \"context\", \"crypto\",\n    \"darwin\", \"datatypes\", \"dl\", \"dlmalloc\",\n    \"encoding\", \"eventbus\",\n    \"flag\", \"fontstash\",\n    \"gg\", \"gx\",\n    \"hash\",\n    \"io\",\n    \"js\", \"json\",\n    \"log\",\n    \"math\", \"mssql\", \"mysql\",\n    \"net\",\n    \"orm\", \"os\",\n    \"pg\", \"picoev\", \"picohttpparser\",\n    \"rand\", \"readline\", \"regex\", \"runtime\",\n    \"semver\", \"sokol\", \"sqlite\", \"stbi\", \"strconv\", \"strings\", \"sync\", \"szip\",\n    \"term\", \"time\", \"toml\",\n    \"v\", \"vweb\",\n    \"x\",\n]\n\nconst baseAttributes = [\n    \"params\", \"noinit\", \"required\", \"skip\", \"assert_continues\",\n    \"unsafe\", \"manualfree\", \"heap\", \"nonnull\", \"primary\", \"inline\",\n    \"direct_array_access\", \"live\", \"flag\", \"noinline\", \"noreturn\", \"typedef\", \"console\",\n    \"sql\", \"table\", \"deprecated\", \"deprecated_after\", \"export\", \"callconv\"\n]\n\nconst word = \"[\\\\w_]+\"\n// [noinit]\nexport const simpleAttributesRegexp = new RegExp(`^(${baseAttributes.join(\"|\")})]$`)\n\n// [key: value]\nconst keyValue = `(${word}: ${word})`\nexport const singleKeyValueAttributesRegexp = new RegExp(`^${keyValue}]$`)\n\n// [attr1; attr2]\nexport const severalSingleKeyValueAttributesRegexp = new RegExp(`^(${baseAttributes.join(\"|\")}(; ?)?){2,}]$`)\n\n// [key: value; key: value]\nexport const keyValueAttributesRegexp = new RegExp(`^((${keyValue})(; )?){2,}]$`)\n\n// [if expr ?]\nexport const ifAttributesRegexp = new RegExp(`^if ${word} \\\\??]`)\n\nfunction computeCompletionVariants(editor: Editor): CompletionVariants | null {\n    // some additional information for the current token.\n    let context: Token[] = []\n    // find the token at the cursor\n    const cur = editor.getCursor()\n    let token = editor.getTokenAt(cur)\n\n    const knownImports = new Set<string>()\n    for (let i = 0; i < Math.min(editor.lineCount(), 10); i++) {\n        const lineTokens = editor.getLineTokens(i).filter(tkn => tkn.type != null)\n        if (lineTokens.length > 0 && lineTokens[0].string === \"import\") {\n            knownImports.add(lineTokens[lineTokens.length - 1].string)\n        }\n    }\n\n    const lineTokens = editor.getLineTokens(cur.line)\n    if (lineTokens.length > 0 && lineTokens[0].string === \"import\") {\n        // if the first token is \"import\", then we are in an import statement,\n        // so add this information to context.\n        context.push(lineTokens[0])\n    }\n\n    const len = token.string.length\n    const prevToken = editor.getTokenAt(Pos(cur.line, cur.ch - len))\n    if (token.string === \".\") {\n        context.push(token)\n    }\n    if (prevToken.string === \".\") {\n        context.push(prevToken)\n    }\n\n    if (/\\b(?:string|comment)\\b/.test(token.type ?? \"\")) return null\n\n    // if it's not a 'word-style' token, ignore the token.\n    if (!/^[\\w$_]*$/.test(token.string)) {\n        token = {\n            start: cur.ch, end: cur.ch, string: \"\", state: token.state,\n            type: token.string === \".\" ? \"property\" : null,\n        }\n    } else if (token.end > cur.ch) {\n        token.end = cur.ch\n        token.string = token.string.slice(0, cur.ch - token.start)\n    }\n\n    return {\n        list: getCompletions(token, knownImports, context),\n        from: Pos(cur.line, token.start),\n        to: Pos(cur.line, token.end),\n    }\n}\n\nfunction getCompletions(token: Token, knownImports: Set<string>, context: Token[]): CompletionVariant[] {\n    const variants: CompletionVariant[] = []\n    const tokenValue = token.string\n\n    function addCompletionVariant(variant: CompletionVariant) {\n        const variantText = variant.text\n\n        // if no matching text, ignore\n        if (!variantText.startsWith(tokenValue)) {\n            return\n        }\n\n        const alreadyContains = variants.find((f) => f.text === variantText)\n        if (!alreadyContains) {\n            variants.push(variant)\n        }\n    }\n\n    if (context && context.length) {\n        const lastToken = context.pop()\n        if (lastToken !== undefined) {\n            if (lastToken.type === \"keyword\" && lastToken.string === \"import\") {\n                baseModules.forEach((text) => {\n                    addCompletionVariant({\n                        text: text,\n                        displayText: text,\n                        className: \"completion-module\",\n                    })\n                })\n                return variants\n            }\n\n            // disable completion after dot\n            if (lastToken.string === \".\") {\n                return []\n            }\n        }\n    }\n\n    knownImports.forEach((text) => {\n        addCompletionVariant({\n            text: text,\n            displayText: text,\n            className: \"completion-module\",\n        })\n    })\n\n    keywords.forEach((text) => {\n        addCompletionVariant({\n            text: text + \" \",\n            displayText: text,\n            className: \"completion-keyword\",\n        })\n    })\n\n    pseudoKeywords.forEach((text) => {\n        addCompletionVariant({\n            text: text + \" \",\n            displayText: text,\n            className: \"completion-keyword\",\n        })\n    })\n\n    atoms.forEach((text) => {\n        addCompletionVariant({\n            text: text,\n            displayText: text,\n            className: \"completion-atom\",\n        })\n    })\n\n    builtinTypes.forEach((text) => {\n        addCompletionVariant({\n            text: text,\n            displayText: text,\n            className: \"completion-type\",\n        })\n    })\n\n    return variants\n}\n\nconst hintHelper = (editor: Editor) => computeCompletionVariants(editor)\n\n// @ts-ignore\nCodeMirror.registerHelper(\"hint\", \"v\", hintHelper)\n", "import {EditorConfiguration, Mode, StringStream} from \"codemirror\"\nimport {\n    ifAttributesRegexp,\n    keyValueAttributesRegexp,\n    severalSingleKeyValueAttributesRegexp,\n    simpleAttributesRegexp,\n    singleKeyValueAttributesRegexp,\n} from \"./v-hint\"\n\ntype Quota = \"'\" | \"\\\"\" | \"`\"\ntype Tokenizer = (stream: StringStream, state: ModeState) => string | null\n\ninterface ModeState {\n    context: Context\n\n    /**\n     * Current tokenizer function or null.\n     */\n    tokenize: Tokenizer | null\n\n    /**\n     * Current indentation level.\n     */\n    indention: number\n\n    /**\n     * Whenever current position is a start of line.\n     */\n    startOfLine: boolean\n}\n\nclass Context {\n    constructor(\n        public indentation: number,\n        public column: number,\n        public type: string,\n        public align: boolean | null,\n        public prev?: Context) {\n    }\n\n    /**\n     * Whenever current position inside a string.\n     */\n    insideString: boolean = false\n\n    /**\n     * Current quotation mark.\n     * Valid only when insideString is true.\n     */\n    stringQuote: Quota | null = null\n\n    /**\n     * Whenever next token expected to be an import name.\n     * Used for highlighting import names in import statements.\n     */\n    expectedImportName: boolean = false\n\n    /**\n     * Set of imports in current context.\n     * Used for highlighting import names in code.\n     */\n    knownImports: Set<string> = new Set()\n}\n\nexport const keywords: Set<string> = new Set<string>([\n    \"as\",\n    \"asm\",\n    \"assert\",\n    \"atomic\",\n    \"break\",\n    \"const\",\n    \"continue\",\n    \"defer\",\n    \"else\",\n    \"enum\",\n    \"fn\",\n    \"for\",\n    \"go\",\n    \"goto\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"interface\",\n    \"is\",\n    \"isreftype\",\n    \"lock\",\n    \"match\",\n    \"module\",\n    \"mut\",\n    \"none\",\n    \"or\",\n    \"pub\",\n    \"return\",\n    \"rlock\",\n    \"select\",\n    \"shared\",\n    \"sizeof\",\n    \"static\",\n    \"struct\",\n    \"spawn\",\n    \"type\",\n    \"typeof\",\n    \"union\",\n    \"unsafe\",\n    \"volatile\",\n    \"__offsetof\",\n])\n\nexport const pseudoKeywords: Set<string> = new Set<string>([\n    \"sql\",\n    \"chan\",\n    \"thread\",\n])\n\nexport const atoms: Set<string> = new Set<string>([\n    \"true\",\n    \"false\",\n    \"nil\",\n    \"print\",\n    \"println\",\n    \"exit\",\n    \"panic\",\n    \"error\",\n    \"dump\",\n])\n\nexport const builtinTypes: Set<string> = new Set<string>([\n    \"bool\",\n    \"string\",\n    \"i8\",\n    \"i16\",\n    \"int\",\n    \"i64\",\n    \"i128\",\n    \"u8\",\n    \"u16\",\n    \"u32\",\n    \"u64\",\n    \"u128\",\n    \"rune\",\n    \"f32\",\n    \"f64\",\n    \"isize\",\n    \"usize\",\n    \"voidptr\",\n    \"any\",\n])\n\n// @ts-ignore\nCodeMirror.defineMode(\"v\", (config: EditorConfiguration): Mode<ModeState> => {\n    const indentUnit = config.indentUnit ?? 0\n\n    const isOperatorChar = /[+\\-*&^%:=<>!?|\\/]/\n\n    let curPunc: string | null = null\n\n    function eatIdentifier(stream: StringStream): string {\n        stream.eatWhile(/[\\w$_\\xa1-\\uffff]/)\n        return stream.current()\n    }\n\n    function tokenBase(stream: StringStream, state: ModeState): string | null {\n        const ch = stream.next()\n        if (ch === null) {\n            return null\n        }\n\n        if (state.context.insideString && ch === \"}\") {\n            stream.eat(\"}\")\n            state.tokenize = tokenString(state.context.stringQuote)\n            return \"end-interpolation\"\n        }\n\n        if (ch === \"\\\"\" || ch === \"'\" || ch === \"`\") {\n            state.tokenize = tokenString(ch)\n            return state.tokenize(stream, state)\n        }\n\n        if (ch === \".\") {\n            if (!stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/)) {\n                return \"operator\"\n            }\n        }\n\n        // probably attribute\n        // [attr]\n        // [attr: value]\n        // [attr1; attr2]\n        if (ch === \"[\") {\n            // [unsafe]\n            if (stream.match(simpleAttributesRegexp)) {\n                return \"attribute\"\n            }\n\n            // [sql: foo]\n            if (stream.match(singleKeyValueAttributesRegexp)) {\n                return \"attribute\"\n            }\n\n            // [sql; foo]\n            if (stream.match(severalSingleKeyValueAttributesRegexp)) {\n                return \"attribute\"\n            }\n\n            // [attr: value; attr: value]\n            // [attr: value; attr]\n            if (stream.match(keyValueAttributesRegexp)) {\n                return \"attribute\"\n            }\n\n            // match `[if some ?]`\n            if (stream.match(ifAttributesRegexp)) {\n                return \"attribute\"\n            }\n        }\n\n        if (/[\\d.]/.test(ch)) {\n            if (ch === \"0\") {\n                stream.match(/^[xX][0-9a-fA-F_]+/) ||\n                stream.match(/^o[0-7_]+/) ||\n                stream.match(/^b[0-1_]+/)\n            } else {\n                stream.match(/^[0-9_]*\\.?[0-9_]*([eE][\\-+]?[0-9_]+)?/)\n            }\n            return \"number\"\n        }\n        if (/[\\[\\]{}(),;:.]/.test(ch)) {\n            curPunc = ch\n            return null\n        }\n        if (ch === \"/\") {\n            if (stream.eat(\"*\")) {\n                state.tokenize = tokenComment\n                return tokenComment(stream, state)\n            }\n            if (stream.eat(\"/\")) {\n                stream.skipToEnd()\n                return \"comment\"\n            }\n        }\n        if (isOperatorChar.test(ch)) {\n            stream.eatWhile(isOperatorChar)\n            return \"operator\"\n        }\n\n        if (ch === \"@\") {\n            eatIdentifier(stream)\n            return \"at-identifier\"\n        }\n\n        if (ch === \"$\") {\n            const ident = eatIdentifier(stream).slice(1)\n            if (keywords.has(ident)) {\n                return \"keyword\"\n            }\n\n            return \"compile-time-identifier\"\n        }\n\n        stream.backUp(2)\n        const wasDot = stream.next() === \".\"\n        stream.next()\n\n        const cur = eatIdentifier(stream)\n        if (cur === \"import\") {\n            state.context.expectedImportName = true\n        }\n\n        if (keywords.has(cur)) return \"keyword\"\n        if (pseudoKeywords.has(cur)) return \"keyword\"\n        if (atoms.has(cur)) return \"atom\"\n        if (builtinTypes.has(cur)) return \"builtin\"\n\n        if (cur.length > 0 && cur[0].toUpperCase() === cur[0]) {\n            return \"type\"\n        }\n\n        const next = stream.peek()\n        if (next === \"(\" || next === \"<\") {\n            return \"function\"\n        }\n\n        if (next === \"[\") {\n            stream.next()\n            const after = stream.next()\n            stream.backUp(2)\n            if (after != null && after.match(/[A-Z]/i)) {\n                return \"function\"\n            }\n        }\n\n        if (wasDot) {\n            return \"property\"\n        }\n\n        // highlight only last part\n        // example:\n        //   import foo.boo\n        //              ^^^ - only this part will be highlighted\n        if (state.context.expectedImportName && stream.peek() != \".\") {\n            state.context.expectedImportName = false\n            if (state.context.knownImports === undefined) {\n                state.context.knownImports = new Set()\n            }\n            state.context.knownImports.add(cur)\n            return \"import-name\"\n        }\n\n        // highlight only identifier with dot after it\n        // example:\n        //   import foo\n        //   import bar\n        //\n        //   foo.bar\n        //   ^^^ - only this part will be highlighted\n        if (state.context.knownImports.has(cur) && stream.peek() == \".\") {\n            return \"import-name\"\n        }\n\n        return \"variable\"\n    }\n\n    function tokenLongInterpolation(stream: StringStream, state: ModeState) {\n        if (stream.match(\"}\")) {\n            state.tokenize = tokenString(state.context.stringQuote)\n            return \"end-interpolation\"\n        }\n        state.tokenize = tokenBase\n        return state.tokenize(stream, state)\n    }\n\n    function tokenShortInterpolation(stream: StringStream, state: ModeState) {\n        const ch = stream.next()\n        if (ch === \" \") {\n            state.tokenize = tokenString(state.context.stringQuote)\n            return state.tokenize(stream, state)\n        }\n        if (ch === \".\") {\n            return \"operator\"\n        }\n\n        const ident = eatIdentifier(stream)\n        if (ident[0].toLowerCase() === ident[0].toUpperCase()) {\n            state.tokenize = tokenString(state.context.stringQuote)\n            return state.tokenize(stream, state)\n        }\n\n        const next = stream.next()\n        stream.backUp(1)\n        if (next === \".\") {\n            state.tokenize = tokenShortInterpolation\n        } else {\n            state.tokenize = tokenString(state.context.stringQuote)\n        }\n\n        return \"variable\"\n    }\n\n    function tokenNextInterpolation(stream: StringStream, state: ModeState) {\n        let next = stream.next()\n        if (next === \"$\" && stream.eat(\"{\")) {\n            state.tokenize = tokenLongInterpolation\n            return \"start-interpolation\"\n        }\n        if (next === \"$\") {\n            state.tokenize = tokenShortInterpolation\n            return \"start-interpolation\"\n        }\n\n        return \"string\"\n    }\n\n    function tokenString(quote: Quota | null) {\n        return function (stream: StringStream, state: ModeState) {\n            state.context.insideString = true\n            state.context.stringQuote = quote\n\n            let next: string | null = \"\"\n            let escaped = false\n            let end = false\n\n            while ((next = stream.next()) != null) {\n                if (next === quote && !escaped) {\n                    end = true\n                    break\n                }\n                if (next === \"$\" && !escaped && stream.eat(\"{\")) {\n                    state.tokenize = tokenNextInterpolation\n                    stream.backUp(2)\n                    return \"string\"\n                }\n                if (next === \"$\" && !escaped) {\n                    state.tokenize = tokenNextInterpolation\n                    stream.backUp(1)\n                    return \"string\"\n                }\n                escaped = !escaped && next === \"\\\\\"\n            }\n\n            if (end || escaped) {\n                state.tokenize = tokenBase\n            }\n\n            state.context.insideString = false\n            state.context.stringQuote = null\n            return \"string\"\n        }\n    }\n\n    function tokenComment(stream: StringStream, state: ModeState) {\n        let maybeEnd = false\n        let ch: string | null\n        while (ch = stream.next()) {\n            if (ch === \"/\" && maybeEnd) {\n                state.tokenize = tokenBase\n                break\n            }\n            maybeEnd = (ch === \"*\")\n        }\n        return \"comment\"\n    }\n\n    function pushContext(state: ModeState, column: number, type: string) {\n        return state.context = new Context(state.indention, column, type, null, state.context)\n    }\n\n    function popContext(state: ModeState) {\n        if (!state.context.prev) return\n        const t = state.context.type\n        if (t === \")\" || t === \"]\" || t === \"}\")\n            state.indention = state.context.indentation\n        state.context = state.context.prev\n        return state.context\n    }\n\n    return {\n        startState: function (): ModeState {\n            return {\n                tokenize: null,\n                context: new Context(0, 0, \"top\", false),\n                indention: 0,\n                startOfLine: true,\n            }\n        },\n\n        token: function (stream: StringStream, state: ModeState): string | null {\n            const ctx = state.context\n            if (stream.sol()) {\n                if (ctx.align == null) {\n                    ctx.align = false\n                }\n                state.indention = stream.indentation()\n                state.startOfLine = true\n            }\n            if (stream.eatSpace()) {\n                return null\n            }\n            curPunc = null\n            const style = (state.tokenize || tokenBase)(stream, state)\n            if (style === \"comment\") {\n                return style\n            }\n            if (ctx.align == null) {\n                ctx.align = true\n            }\n\n            if (curPunc === \"{\") pushContext(state, stream.column(), \"}\")\n            else if (curPunc === \"[\") pushContext(state, stream.column(), \"]\")\n            else if (curPunc === \"(\") pushContext(state, stream.column(), \")\")\n            else if (curPunc === \"}\" && ctx.type === \"}\") popContext(state)\n            else if (curPunc === ctx.type) popContext(state)\n            state.startOfLine = false\n            return style\n        },\n\n        indent: function (state: ModeState, textAfter: string): number {\n            if (state.tokenize !== tokenBase && state.tokenize != null) {\n                return 0\n            }\n\n            if (state.context.type == \"top\") {\n                return 0\n            }\n\n            const ctx = state.context\n            const firstChar = textAfter.charAt(0)\n\n            const closing = firstChar === ctx.type\n            if (ctx.align) {\n                return ctx.column + (closing ? 0 : 1)\n            }\n\n            return ctx.indentation + (closing ? 0 : indentUnit)\n        },\n\n        // @ts-ignore\n        electricChars: \"{}):\",\n        // @ts-ignore\n        closeBrackets: \"()[]{}''\\\"\\\"``\",\n        fold: \"brace\",\n        blockCommentStart: \"/*\",\n        blockCommentEnd: \"*/\",\n        lineComment: \"//\",\n    }\n})\n\n// @ts-ignore\nCodeMirror.defineMIME(\"text/x-v\", \"v\")\n", "import { CodeRepository } from \"./interface\";\n\n/**\n * Shared code repository using the server side SQL storage.\n */\nexport class SharedCodeRepository implements CodeRepository {\n    public static readonly QUERY_PARAM_NAME = \"query\"\n    public static readonly CODE_NOT_FOUND = \"Not found.\"\n\n    private readonly hash: string\n\n    constructor(hash: string) {\n        this.hash = hash\n    }\n\n    saveCode(_: string) {\n        // nothing to do\n    }\n\n    getCode(onReady: (code: string) => void) {\n        return this.getSharedCode(onReady)\n    }\n\n    private getSharedCode(onReady: (code: string) => void) {\n        const data = new FormData()\n        data.append(\"hash\", this.hash)\n\n        fetch(\"/query\", {\n            method: \"post\",\n            body: data,\n        })\n            .then(resp => resp.text())\n            .then(data => {\n                onReady(data)\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n}\n", "import { CodeRepository } from \"./interface\";\n\nexport class TextCodeRepository implements CodeRepository {\n    constructor(private text: string) {\n    }\n\n    saveCode(_: string): void {\n    }\n\n    getCode(onReady: (code: string) => void): void {\n        onReady(this.text)\n    }\n}\n", "import { CodeRepository } from \"./interface\";\n\n/**\n * Local code repository using the browser's local storage.\n */\nexport class LocalCodeRepository implements CodeRepository {\n    private static readonly LOCAL_STORAGE_KEY = \"code\"\n\n    // language=V\n    public static readonly WELCOME_CODE = `\n// Welcome to the V Playground!\n// Here you can edit, run, and share V code.\n// Let's start with a simple \"Hello, Playground!\" example:\nprintln('Hello, Playground!')\n\n// To run the code, click the \"Run\" button or just press Ctrl + R.\n// To format the code, click the \"Format\" button or just press Ctrl + L.\n\n// More examples are available in top dropdown list.\n// You can find Help for shortcuts in the bottom right corner or just press Ctrl + I.\n// See also change theme button in the top right corner.\n// If you want to learn more about V, visit https://vlang.io\n// Join us on Discord: https://discord.gg/vlang\n// Enjoy!\n`.trimStart()\n\n    saveCode(code: string) {\n        window.localStorage.setItem(LocalCodeRepository.LOCAL_STORAGE_KEY, code)\n    }\n\n    getCode(onReady: (code: string) => void) {\n        const localCode = window.localStorage.getItem(LocalCodeRepository.LOCAL_STORAGE_KEY)\n        if (localCode === null || localCode === undefined) {\n            onReady(LocalCodeRepository.WELCOME_CODE)\n            return\n        }\n        onReady(localCode)\n    }\n}\n", "import { CodeRepository } from \"./interface\";\n\nexport class Base64CodeRepository implements CodeRepository {\n    public static readonly QUERY_PARAM_NAME = \"base64\"\n\n    private readonly decodedCode\n    constructor(private text: string) {\n        this.decodedCode = atob(text)\n    }\n\n    saveCode(_: string): void {\n    }\n\n    getCode(onReady: (code: string) => void): void {\n        onReady(this.decodedCode)\n    }\n}\n", "import { CodeRepository } from \"./interface\";\n\nexport class GithubGistCodeRepository implements CodeRepository {\n    public static readonly QUERY_PARAM_NAME = \"gist\"\n\n    constructor(private id: string) {\n    }\n\n    saveCode(_: string): void {\n    }\n\n    getCode(onReady: (code: string) => void): void {\n        fetch(\"https://api.github.com/gists/\" + this.id, {\n            method: \"get\",\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(resp => resp.json())\n            .then(data => {\n                const files = data.files\n                const firstKey = Object.keys(files)[0];\n                const file = files[firstKey]\n                const url = file.raw_url\n\n                fetch(url, {\n                    method: \"get\",\n                    headers: {\n                        'Content-Type': 'text/plain'\n                    }\n                })\n                    .then(r => r.text())\n                    .then(r => {\n                        onReady(r)\n                    })\n                    .catch(err => {\n                        console.log(err)\n                    })\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n}\n", "import { CodeRepository } from \"./interface\";\nimport { SharedCodeRepository } from \"./SharedCodeRepository\";\nimport { TextCodeRepository } from \"./TextCodeRepository\";\nimport { LocalCodeRepository } from \"./LocalCodeRepository\";\n\nimport { QueryParams } from \"../QueryParams\";\nimport { PlaygroundConfig } from \"../PlaygroundConfig\";\nimport {Base64CodeRepository} from \"./Base64CodeRepository\"\nimport {GithubGistCodeRepository} from \"./GithubGistCodeRepository\"\n\n/**\n * CodeRepositoryManager is responsible for managing the code repositories.\n */\nexport class CodeRepositoryManager {\n\n    /**\n     * Base on `params` tries to select the appropriate repository to get the code.\n     *\n     * @param params The query parameters.\n     * @param config The playground configuration.\n     * @returns {CodeRepository}\n     */\n    static selectRepository(params: QueryParams, config?: PlaygroundConfig): CodeRepository {\n        if (config !== undefined && config.codeHash !== null && config.codeHash !== undefined) {\n            return new SharedCodeRepository(config.codeHash)\n        }\n\n        if (config !== undefined && config.code !== null && config.code !== undefined) {\n            return new TextCodeRepository(config.code)\n        }\n\n        if (config !== undefined && config.embed !== null && config.embed !== undefined && config.embed) {\n            // By default, editor is empty for embed mode.\n            return new TextCodeRepository(\"\")\n        }\n\n        const repository = new LocalCodeRepository()\n        const hash = params.getURLParameter(SharedCodeRepository.QUERY_PARAM_NAME)\n        if (hash !== null && hash !== undefined) {\n            return new SharedCodeRepository(hash)\n        }\n\n        const base64Code = params.getURLParameter(Base64CodeRepository.QUERY_PARAM_NAME)\n        if (base64Code !== null && base64Code !== undefined) {\n            return new Base64CodeRepository(base64Code)\n        }\n\n        const gistId = params.getURLParameter(GithubGistCodeRepository.QUERY_PARAM_NAME)\n        if (gistId !== null && gistId !== undefined) {\n            return new GithubGistCodeRepository(gistId)\n        }\n\n        return repository\n    }\n}\n", "/**\n * QueryParams is responsible for parsing query params from URL\n * and updating the URL when the params change.\n *\n * @example\n * const queryParams = new QueryParams(window.location.search);\n * queryParams.updateURLParameter('theme', 'dark')\n * // The URL will be updated to: http://localhost:8080/?theme=dark\n */\nexport class QueryParams {\n    public readonly params: URLSearchParams\n\n    /**\n     * @param path - The path to parse (usually `window.location.search`).\n     */\n    constructor(path: string) {\n        this.params = new URLSearchParams(path)\n    }\n\n    /**\n     * Update the URL with the new param.\n     * @param param The param to update.\n     * @param value The new value of the param.\n     */\n    public updateURLParameter(param: string, value: string | null) {\n        const url = QueryParams.updateURLParameter(window.location.href, param, value)\n        window.history.replaceState({}, \"\", url)\n    }\n\n    public getURLParameter(param: string): string | null {\n        return this.params.get(param)\n    }\n\n    private static updateURLParameter(url: string, param: string, value: string | null) {\n        const parsedUrl = new URL(url)\n\n        if (value) {\n            parsedUrl.searchParams.set(param, value)\n        } else {\n            parsedUrl.searchParams.delete(param)\n        }\n\n        return parsedUrl.toString()\n    }\n}\n", "export class HelpManager {\n    // TODO: don't know other way to detect macOS...\n    // noinspection JSDeprecatedSymbols\n    static isMac = navigator.platform.toUpperCase().indexOf(\"MAC\") >= 0\n\n    private containingElement: HTMLElement\n    private readonly element: HTMLElement\n    private readonly helpOverlay!: HTMLElement\n    private readonly showHelpButton!: HTMLElement\n    private readonly closeHelpButton!: HTMLElement\n\n    constructor(containingElement: HTMLElement) {\n        this.containingElement = containingElement\n        this.element = containingElement.getElementsByClassName(\"js-help-wrapper\")[0] as HTMLElement\n\n        if (this.element === null || this.element === undefined) {\n            return\n        }\n\n        this.helpOverlay = this.element.querySelector(\".js-help-overlay\")!\n        this.showHelpButton = this.element.querySelector(\".js-show-help\")!\n        this.closeHelpButton = this.element.querySelector(\".js-close-help\")!\n\n        this.mount()\n    }\n\n    private mount() {\n        if (this.showHelpButton !== undefined) {\n            this.showHelpButton.addEventListener(\"click\", () => {\n                this.toggleHelp()\n            })\n        }\n\n        if (this.helpOverlay !== undefined) {\n            this.helpOverlay.addEventListener(\"click\", () => {\n                this.toggleHelp()\n            })\n        }\n\n        if (this.closeHelpButton !== undefined) {\n            this.closeHelpButton.addEventListener(\"click\", () => {\n                this.toggleHelp()\n            })\n        }\n\n        // Replace shortcut with understandable for OS user:\n        //  - macOS: \u2303\n        //  - Windows/Linux: Ctrl\n        if (!HelpManager.isMac) {\n            const shortcuts = document.querySelectorAll<HTMLElement>(\".js-shortcut kbd.ctrl\")\n            shortcuts.forEach(function (shortcut: HTMLElement) {\n                shortcut.innerText = \"Ctrl\"\n            })\n        }\n    }\n\n    public closeHelp() {\n        if (!this.helpOverlay.classList.contains(\"opened\")) {\n            return\n        }\n        this.toggleHelp()\n    }\n\n    public toggleHelp() {\n        const help = this.containingElement.getElementsByClassName(\"js-help\")[0]\n        help.classList.toggle(\"opened\")\n        this.helpOverlay.classList.toggle(\"opened\")\n    }\n}\n", "function fallbackCopyTextToClipboard(text: string): void {\n    const textArea = document.createElement(\"textarea\")\n    textArea.value = text\n\n    // Avoid scrolling to bottom\n    textArea.style.top = \"0\"\n    textArea.style.left = \"0\"\n    textArea.style.position = \"fixed\"\n\n    document.body.appendChild(textArea)\n    textArea.focus()\n    textArea.select()\n\n    try {\n        // noinspection JSDeprecatedSymbols\n        const successful = document.execCommand(\"copy\")\n        const msg = successful ? \"successful\" : \"unsuccessful\"\n        console.log(\"Fallback: Copying text command was \" + msg)\n    } catch (err) {\n        console.log(\"Fallback: Oops, unable to copy\", err)\n    }\n\n    document.body.removeChild(textArea)\n}\n\nexport function copyTextToClipboard(text: string, onCopy: () => void): void {\n    if (!navigator.clipboard) {\n        fallbackCopyTextToClipboard(text)\n        return\n    }\n    navigator.clipboard.writeText(text).then(function () {\n        console.log(\"Async: Copying to clipboard was successful!\")\n        onCopy()\n    }, function (err) {\n        fallbackCopyTextToClipboard(text)\n        console.log(\"Async: Could not copy text: \", err, \"fallback to old method\")\n    })\n}\n", "type OnCloseCallback = () => void\ntype OnWriteCallback = (text: string) => void\ntype FilterCallback = (text: string) => boolean\n\nexport class Terminal {\n    private readonly element: HTMLElement\n    private onClose: OnCloseCallback | null = null\n    private onWrite: OnWriteCallback | null = null\n    private filters: FilterCallback[] = []\n\n    constructor(element: HTMLElement) {\n        this.element = element\n        this.attachResizeHandler(element)\n    }\n\n    public registerCloseHandler(handler: () => void) {\n        this.onClose = handler\n    }\n\n    public registerWriteHandler(handler: (text: string) => void) {\n        this.onWrite = handler\n    }\n\n    public registerFilter(filter: FilterCallback) {\n        this.filters.push(filter)\n    }\n\n    public write(text: string) {\n        const lines = text.split(\"\\n\")\n        const outputElement = this.getTerminalOutputElement()\n        const filteredLines = lines.filter(line => this.filters.every(filter => filter(line)))\n        const newText = filteredLines.join(\"\\n\")\n        outputElement.innerHTML += newText + \"\\n\"\n\n        if (this.onWrite !== null) {\n            this.onWrite(text)\n        }\n    }\n\n    public clear() {\n        this.getTerminalOutputElement().innerHTML = \"\"\n    }\n\n    public mount() {\n        const closeButton = this.element.querySelector(\".js-terminal__close-buttom\") as HTMLElement\n        if (closeButton === null || closeButton === undefined || this.onClose === null) {\n            return\n        }\n\n        closeButton.addEventListener(\"click\", this.onClose)\n    }\n\n    private getTerminalOutputElement(): HTMLElement {\n        return this.element.querySelector(\".js-terminal__output\") as HTMLElement\n    }\n\n    private attachResizeHandler(element: HTMLElement) {\n        const header = element.querySelector('.header');\n        if (!header) return;\n\n        let mouseDown = false;\n        header.addEventListener('mousedown', () => {\n            mouseDown = true;\n            document.body.classList.add('dragging');\n        });\n\n        document.addEventListener('mousemove', (e: MouseEvent) => {\n            if (!mouseDown) return;\n            element.style.height = `${document.body.clientHeight + 70 - e.clientY + header.clientHeight / 2}px`;\n        });\n\n        document.addEventListener('mouseup', () => {\n            mouseDown = false;\n            document.body.classList.remove('dragging');\n        });\n    }\n}\n", "import { QueryParams } from \"../QueryParams\";\nimport { runIcons, testIcons } from \"../icons\";\n\nexport enum RunConfigurationType {\n    Run = \"Run\",\n    Test = \"Test\",\n}\n\nfunction getRunConfigurationTypeByString(runConfigurationType: string): RunConfigurationType {\n    switch (runConfigurationType) {\n        case \"Run\":\n            return RunConfigurationType.Run\n        case \"Test\":\n            return RunConfigurationType.Test\n        default:\n            throw new Error(`Unknown run configuration type: ${runConfigurationType}`)\n    }\n}\n\nexport class RunConfigurationManager {\n    private static readonly QUERY_PARAM_NAME = \"runConfiguration\"\n    private static readonly LOCAL_STORAGE_KEY = \"run-configuration\"\n\n    private readonly queryParams: QueryParams\n    private currentConfiguration: RunConfigurationType = RunConfigurationType.Run\n    private fromQueryParam: boolean = false\n\n    private readonly runButton = document.querySelector(\".js-run__action\")!\n    private readonly runButtonLabel = document.querySelector(\".js-run__action .label\")!\n    private readonly openRunButton = document.querySelector(\".js-open-run-select\")!\n    private readonly configurationsList = document.querySelector(\".js-run-configurations-list\")!\n    private readonly configurations = document.querySelectorAll(\".js-configuration\")!\n\n    private onChange: (type: RunConfigurationType) => void = () => {}\n    private onSelect: (type: RunConfigurationType) => void = () => {}\n\n    constructor(queryParams: QueryParams) {\n        this.queryParams = queryParams\n\n        this.mount()\n    }\n\n    public registerOnChange(callback: (type: RunConfigurationType) => void): void {\n        this.onChange = callback\n    }\n\n    public registerOnSelect(callback: (type: RunConfigurationType) => void): void {\n        this.onSelect = callback\n    }\n\n    public toggleConfigurationsList() {\n        this.configurationsList.classList.toggle(\"hidden\")\n    }\n\n    public setupConfiguration() {\n        const configurationFromQuery = this.queryParams.getURLParameter(RunConfigurationManager.QUERY_PARAM_NAME)\n        if (configurationFromQuery !== null && configurationFromQuery !== undefined) {\n            this.fromQueryParam = true\n            this.useConfiguration(getRunConfigurationTypeByString(configurationFromQuery))\n            return\n        }\n\n        const configurationFromLocalStorage = window.localStorage.getItem(RunConfigurationManager.LOCAL_STORAGE_KEY)\n        if (configurationFromLocalStorage !== null && configurationFromLocalStorage !== undefined) {\n            this.useConfiguration(getRunConfigurationTypeByString(configurationFromLocalStorage))\n            return\n        }\n\n        this.useConfiguration(RunConfigurationType.Run)\n    }\n\n    public useConfiguration(runConfigurationType: RunConfigurationType) {\n        this.currentConfiguration = runConfigurationType\n        this.onChange(runConfigurationType)\n\n        const runConfigurationAsString = RunConfigurationType[runConfigurationType]\n        this.runButton.setAttribute(\"data-type\", runConfigurationAsString)\n        this.runButtonLabel.textContent = runConfigurationAsString\n\n        if (!this.fromQueryParam) {\n            // Don't update saved theme state if we're loading from query param.\n            window.localStorage.setItem(RunConfigurationManager.LOCAL_STORAGE_KEY, runConfigurationAsString)\n        }\n\n        if (this.fromQueryParam) {\n            // We update the query param only if we loaded from it.\n            // If we don't change, then the user can change the configuration and then reload the page.\n            // In this case, the page will load with the configuration from the URL, and the user\n            // will think that his configuration change has not been saved (and will not be saved\n            // until he removes the configuration from the URL).\n            // To avoid this, we update the URL if the user changes configuration.\n            this.queryParams.updateURLParameter(RunConfigurationManager.QUERY_PARAM_NAME, runConfigurationAsString)\n        }\n    }\n\n    private mount() {\n        this.openRunButton.addEventListener(\"click\", () => {\n            this.toggleConfigurationsList()\n        })\n\n        this.configurations.forEach(configuration => {\n            configuration.addEventListener(\"click\", () => {\n                const configurationTypeString = configuration.getAttribute(\"data-type\") ?? \"Run\"\n                const configurationType = getRunConfigurationTypeByString(configurationTypeString)\n                this.useConfiguration(configurationType)\n                this.onSelect(configurationType)\n            })\n        })\n    }\n}\n", "import { LocalCodeRepository } from \"../Repositories\";\nimport { RunConfigurationType } from \"../RunConfigurationManager/RunConfigurationManager\";\n\nexport interface IExample {\n    name: string\n    code: string\n    runConfiguration: RunConfigurationType\n}\n\nexport const examples: IExample[] = [\n    {\n        name: \"Hello, Playground!\",\n        code: LocalCodeRepository.WELCOME_CODE,\n        runConfiguration: RunConfigurationType.Run\n    },\n    {\n        name: \"String interpolation\",\n        // language=V\n        code: `\n// In V you can define array of string with the following syntax:\nareas := ['game', 'web', 'tools', 'science', 'systems', 'embedded', 'drivers', 'GUI', 'mobile']\n\nfor area in areas {\n    // V uses the \\${} notation to interpolate a variable\n    // or expression right on the string.\n    // Learn more about string interpolation in the documentation:\n    // https://github.com/vlang/v/blob/master/doc/docs.md#string-interpolation\n    println('Hello, \\${area} developers!')\n}\n        `,\n        runConfiguration: RunConfigurationType.Run\n    },\n    {\n        name: \"Fibonacci\",\n        // language=v\n        code: `\n// As in other languages, you can define functions in V.\n// Learn more about functions in the documentation:\n// https://github.com/vlang/v/blob/master/doc/docs.md#functions\nfn fib(n int) u64 {\n    // To define a array of specific type, use the following syntax.\n    // Here we define an array of int with the length of n + 2.\n    // Learn more about arrays in the documentation:\n    // https://github.com/vlang/v/blob/master/doc/docs.md#arrays\n    mut f := []u64{len: n + 2}\n    f[0] = 0\n    f[1] = 1\n\n    for i := 2; i <= n; i++ {\n        f[i] = f[i - 1] + f[i - 2]\n    }\n\n    return f[n]\n}\n\n// main function is the entry point of the program.\n// See note about the main function in the documentation:\n// https://github.com/vlang/v/blob/master/doc/docs.md#hello-world\nfn main() {\n    for i in 0 .. 30 {\n        println(fib(i))\n    }\n}\n`,\n        runConfiguration: RunConfigurationType.Run\n    },\n    {\n        name: \"Structs and embedded structs\",\n        // language=V\n        code: `\n// Structs are a way to define a new type with a set of fields.\n// You can define a struct with the following syntax:\n// Learn more about structs in the documentation:\n// https://github.com/vlang/v/blob/master/doc/docs.md#structs\nstruct Size {\n// mut keyword is used to define mutable fields\n// pub keyword is used to define public fields\n// \n// By default, all fields are private and immutable.\npub mut:\n    width  int\n    height int\n}\n\n// Structs can have methods.\nfn (s &Size) area() int {\n    return s.width * s.height\n}\n\n// Structs can be embedded in other structs.\nstruct Button {\n    Size\n    title string\n}\n\nmut button := Button{\n    title: 'Click me'\n    height: 2\n}\n\nbutton.width = 3\n\n// With embedding, the struct Button will automatically have get all the \n// fields and methods from the struct Size, which allows you to do:\nassert button.area() == 6\n// If you need to access embedded structs directly, use an explicit \n// reference like \\`button.Size\\`:\nassert button.Size.area() == 6\n// Conceptually, embedded structs are similar to mixins in OOP, not base classes.\n\nprint(button)\n`,\n        runConfiguration: RunConfigurationType.Run\n    },\n    {\n        name: \"Sum types\",\n        // language=V\n        code: `\nstruct Empty {}\n\nstruct Node {\n    value f64\n    left  Tree\n    right Tree\n}\n\n// Sum types are a way to define a type that can be one of several types.\n// In V, sum types are defined with following syntax.\n// Learn more about sum types in the documentation:\n// https://github.com/vlang/v/blob/master/doc/docs.md#sum-types\ntype Tree = Empty | Node\n\n// Let's calculate the sum of all values in the tree.\nfn main() {\n    // Here we just define a tree with some values.\n    left := Node{0.2, Empty{}, Empty{}}\n    right := Node{0.3, Empty{}, Node{0.4, Empty{}, Empty{}}}\n    tree := Node{0.5, left, right}\n\n    // And call the sum function.\n    // Since the sum function accepts a Tree, we can pass it any of the\n    // possible types of the Tree sum type.\n    // In this case, we pass it a Node.\n    println(sum(tree)) // 0.2 + 0.3 + 0.4 + 0.5 = 1.4\n}\n\n// sum up all node values\nfn sum(tree Tree) f64 {\n    // In V, you can use \\`match\\` expression to match a value against a sum type.\n    // Learn more about match expression in the documentation:\n    // https://github.com/vlang/v/blob/master/doc/docs.md#match\n    return match tree {\n        // if the value has type Empty, return 0\n        Empty { 0 }\n        // if the value has type Node, return the sum of the node value and the sum of the left and right subtrees\n        Node { tree.value + sum(tree.left) + sum(tree.right) }\n    }\n}\n`,\n        runConfiguration: RunConfigurationType.Run\n    },\n    {\n        name: \"Generics\",\n        // language=V\n        code: `\n// Sometimes there may be situations where you need code that will \n// work in the same way for different types.\n//\n// For example, in this example, we are creating a \\`List\\` that will \n// be able to store elements of any type while maintaining type safety.\n//\n// In V, to define a generic structure, you need to write the generic parameters \n// in square brackets after name. \n// There may be one or more of them, each of them must be named with a \n// single capital letter.\n//\n// Learn more about generics in the documentation:\n// https://github.com/vlang/v/blob/master/doc/docs.md#generics\nstruct List[T] {\nmut:\n    data []T\n}\n\n// Since the \\`List\\` structure is generic, we can define methods that accept or \n// return the type with which the structure was created.\n//\n// That is, for each \\`List\\` with a specific type, its own copy of this structure \n// will be created when V compile code.\n//\n// This means that if you call push on a \\`List[int]\\`, then the \\`push()\\` function will \n// take an int argument.\nfn (mut l List[T]) push(val T) {\n    l.data << val\n}\n\n// Here everything is the same as with \\`push()\\`, however, for \\`List[int]\\` the function \n// will return an int value, and not accept it.\nfn (l &List[T]) pop() T {\n    return l.data.last()\n}\n\n// In V, there can be not only structures, but also functions, so the following function \n// creates a generic structure with the type passed to the function.\nfn list_of[T]() List[T] {\n    return List[T]{}\n}\n\nfn main() {\n    // Let's create a new \\`List\\` that will contain the strings:\n    mut string_list := List[string]{}\n    //                     ^^^^^^^^ Generic arguments to create a struct\n    // Here we have passed a string as the T parameter to the struct.\n    // We can say that this code is equivalent to \\`List_string{}\\`, where \n    // \\`List_string\\` has a data field with type \\`[]string\\`.\n\n    // Methods are called as usual, the compiler will understand \n    // that \\`push()\\` takes a value of type string.\n    string_list.push('hello')\n    string_list.push('world')\n\n    // When you call \\`pop()\\`, the compiler will understand that the method returns a string.\n    last_string := string_list.pop()\n    println(last_string)\n\n    // Now let's create a new \\`List\\` but which stores bool.\n    // We use our \\`list_of()\\` function for this.\n    mut bool_list := list_of[bool]()\n    //                      ^^^^^^ Generic arguments to call the function.\n    // Here, as for \\`List\\`, we passed arguments to be used instead of T.\n    // The compiler itself will compute and understand that it is necessary \n    // to create a \\`List\\` with the bool type.\n\n    bool_list.push(true)\n    println(bool_list)\n}\n        `,\n        runConfiguration: RunConfigurationType.Run\n    },\n    {\n        name: \"Concurrency\",\n        // language=V\n        code: `\n// V's model of concurrency is going to be very similar to Go's.\n// Learn more about concurrency in the documentation:\n// https://github.com/vlang/v/blob/master/doc/docs.md#concurrency\nimport time\n\nfn task(id int, duration int) {\n    println('task \\${id} begin')\n    time.sleep(duration * time.millisecond)\n    println('task \\${id} end')\n}\n\nfn main() {\n    // []thread is a special type that represents an array of threads\n    mut threads := []thread{}\n\n    // \\`spawn\\` starts a new thread and returns a \\`thread\\` object\n    // that can be added in thread array.\n    threads << spawn task(1, 500)\n    threads << spawn task(2, 900)\n    threads << spawn task(3, 100)\n\n    // \\`wait\\` is special function that waits for all threads to finish.\n    threads.wait()\n\n    println('done')\n}\n        `,\n        runConfiguration: RunConfigurationType.Run\n    },\n    {\n        name: \"Channel Select\",\n        // language=V\n        code: `\n// Channels in V very similar to Go's channels.\n// Learn more about channels in the documentation:\n// https://github.com/vlang/v/blob/master/doc/docs.md#channels\nimport time\n\nfn main() {\n    // Channels is a special type that represents a communication channel between threads.\n    ch := chan f64{}\n    //         ^^^ type of data that can be sent or received through the channel\n    ch2 := chan f64{}\n    ch3 := chan f64{}\n    mut b := 0.0\n    c := 1.0\n\n    // Setup spawn threads that will send on ch/ch2.\n    spawn fn (the_channel chan f64) {\n        time.sleep(5 * time.millisecond)\n        // You can push value to channel...\n        the_channel <- 1.0\n    }(ch)\n\n    spawn fn (the_channel chan f64) {\n        time.sleep(1 * time.millisecond)\n        // ...in different threads.\n        the_channel <- 1.0\n    }(ch2)\n\n    spawn fn (the_channel chan f64) {\n        // And read values from channel in other threads\n        // If channel is empty, the thread will wait until a value is pushed to it.\n        _ := <-the_channel\n    }(ch3)\n\n    // Select is powerful construct that allows you to work for multiple channels.\n    // Learn more about select in the documentation:\n    // https://github.com/vlang/v/blob/master/doc/docs.md#channel-select\n    select {\n        a := <-ch {\n            // do something with \\`a\\`\n            eprintln('> a: \\${a}')\n        }\n        b = <-ch2 {\n            // do something with predeclared variable \\`b\\`\n            eprintln('> b: \\${b}')\n        }\n        ch3 <- c {\n            // do something if \\`c\\` was sent\n            time.sleep(5 * time.millisecond)\n            eprintln('> c: \\${c} was sent on channel ch3')\n        }\n        500 * time.millisecond {\n            // do something if no channel has become ready within 0.5s\n            eprintln('> more than 0.5s passed without a channel being ready')\n        }\n    }\n    eprintln('> done')\n}\n        `,\n        runConfiguration: RunConfigurationType.Run\n    },\n    {\n        name: \"JSON Encoding/Decoding\",\n        // language=v\n        code: `\n// V very modular and has a lot of built-in modules.\n// In this example we will use the json module to encode and decode JSON data.\n// If you want to learn more about modules, visit \n// https://github.com/vlang/v/blob/master/doc/docs.md#modules\nimport json\n\n// Since V is statically typed, we need to define a struct to hold the data.\n// Learn more about structs in the documentation:\n// https://github.com/vlang/v/blob/master/doc/docs.md#structs\nstruct User {\n    name string\n    age  int\nmut:\n    // We can use the \\`mut\\` keyword to make the field mutable.\n    // Without it, there is no way to change the field value.\n    is_registered bool\n}\n\nfn main() {\n    json_data := '[{\"name\":\"Frodo\", \"age\":25}, {\"name\":\"Bobby\", \"age\":10}]'\n    \n    // json.decode() is special function that can decode JSON data.\n    // It takes a type and a json data as arguments and returns a value of passed type.\n    // V tries to decode the data as the passed type. For example, if you pass []User, \n    // it will try to decode the data as an array of User.\n    // \n    // In this case it will return an array of User.\n    // \n    // Learn more about the json module in the documentation:\n    // https://github.com/vlang/v/blob/master/doc/docs.md#json\n    mut users := json.decode([]User, json_data) or {\n        // But if the json data is invalid, it will return an error.\n        // You can handle it with the 'or {}' syntax as in this example.\n        // \n        // err is a special variable that contains the error message.\n        // \n        // Learn more about error handling in documentation: \n        // https://github.com/vlang/v/blob/master/doc/docs.md#optionresult-types-and-error-handling\n        eprintln('Failed to parse json, error: \\${err}')\n        return\n    }\n\n    for user in users {\n        // See 'String interpolation' example to learn more about the \\${} notation.\n        println('\\${user.name}: \\${user.age}')\n    }\n    println('')\n    \n    for i, mut user in users {\n        println('\\${i}) \\${user.name}')\n        if !user.can_register() {\n            println('Cannot register \\${user.name}, they are too young')\n            continue\n        }\n\n        // \\`user\\` is declared as \\`mut\\` in the for loop,\n        // modifying it will modify the array\n        user.register()\n    }\n\n    println('')\n    \n    // json.encode() is a special function that can encode a value to JSON.\n    // It takes a value and returns a JSON string.\n    // \n    // It always return a string, so you don't need to handle the error.\n    encoded_data := json.encode(users)\n    println(encoded_data)\n}\n\nfn (u User) can_register() bool {\n    return u.age >= 16\n}\n\nfn (mut u User) register() {\n    u.is_registered = true\n}\n\n// Output:\n// Frodo: 25\n// Bobby: 10\n//\n// 0) Frodo\n// 1) Bobby\n// Cannot register Bobby, they are too young\n//\n// [{\"name\":\"Frodo\",\"age\":25,\"is_registered\":true},{\"name\":\"Bobby\",\"age\":10,\"is_registered\":false}]\n`,\n        runConfiguration: RunConfigurationType.Run\n    },\n    {\n        name: \"Filter Log file\",\n        // language=v\n        code: `\n// Print file lines that start with \"DEBUG:\"\nimport os\n\n// \\`write_file\\` returns a result (\\`!\\`), it must be checked\nos.write_file('app.log', '\nERROR: log file not found\nDEBUG: create new file\nDEBUG: write text to log file\nERROR: file not writeable\n') or {\n    // \\`err\\` is a special variable that contains the error\n    // in \\`or {}\\` blocks\n    eprintln('failed to write the file: \\${err}')\n    return\n}\n\n// \\`read_file\\` returns a result (\\`!string\\`), it must be checked\ntext := os.read_file('app.log') or {\n    eprintln('failed to read the file: \\${err}')\n    return\n}\n\nlines := text.split_into_lines()\nfor line in lines {\n    if line.starts_with('DEBUG:') {\n        println(line)\n    }\n}\n\n// Output:\n// DEBUG: create new file\n// DEBUG: write text to log file\n`,\n        runConfiguration: RunConfigurationType.Run\n    },\n    {\n        name: \"Compile-time Reflection\",\n        code: `\n// https://github.com/vlang/v/blob/master/doc/docs.md#compile-time-reflection\n\nstruct User {\n    name string\n    age  int\n}\n\nfn main() {\n    data := 'name=Alice\\\\nage=18'\n    user := decode[User](data)\n    println(user)\n}\n\nfn decode[T](data string) T {\n    mut result := T{}\n    // compile-time \\`for\\` loop\n    // T.fields gives an array of a field metadata type\n    $for field in T.fields {\n        $if field.typ is string {\n            // $(string_expr) produces an identifier\n            result.$(field.name) = get_string(data, field.name)\n        } $else $if field.typ is int {\n            result.$(field.name) = get_int(data, field.name)\n        }\n    }\n    return result\n}\n\nfn get_string(data string, field_name string) string {\n    for line in data.split_into_lines() {\n        key_val := line.split('=')\n        if key_val[0] == field_name {\n            return key_val[1]\n        }\n    }\n    return ''\n}\n\nfn get_int(data string, field string) int {\n    return get_string(data, field).int()\n}\n\n// \\`decode[User]\\` generates:\n// fn decode_User(data string) User {\n//     mut result := User{}\n//     result.name = get_string(data, 'name')\n//     result.age = get_int(data, 'age')\n//     return result\n// }\n`,\n        runConfiguration: RunConfigurationType.Run\n    },\n    {\n        name: \"Anonymous & higher order functions\",\n        // language=V\n        code: `\n// https://github.com/vlang/v/blob/master/doc/docs.md#anonymous--higher-order-functions\n\nfn sqr(n int) int {\n    return n * n\n}\n\nfn cube(n int) int {\n    return n * n * n\n}\n\nfn run(value int, op fn (int) int) int {\n    return op(value)\n}\n\nfn main() {\n    // Anonymous functions can be called immediately:\n    fn () {\n        println('Anonymous function')\n    }()\n\n    // Functions can be passed to other functions\n    println(run(5, sqr)) // \"25\"\n\n    // Anonymous functions can be declared inside other functions:\n    double_fn := fn (n int) int {\n        return n + n\n    }\n    println(run(5, double_fn)) // \"10\"\n\n    // Functions can be passed around without assigning them to variables:\n    res := run(5, fn (n int) int {\n        return n + n\n    })\n    println(res) // \"10\"\n\n    // You can even have an array/map of functions:\n    fns := [sqr, cube]\n    println(fns[0](10)) // \"100\"\n    \n    fns_map := {\n        'sqr':  sqr\n        'cube': cube\n    }\n    println(fns_map['cube'](2)) // \"8\"\n}\n`,\n        runConfiguration: RunConfigurationType.Run\n    },\n    {\n        name: \"Testing\",\n        // language=V\n        code: `\n// Tests in V is very simple.\n// To define a test function, just add \\`test_\\` prefix to the function name.\n// Learn more about testing in the documentation:\n// https://github.com/vlang/v/blob/master/doc/docs.md#testing\nfn test_hello() {\n    // Inside test functions you can use \\`assert\\` to check if the result is correct.\n    assert hello() == 'Hello world'\n\n    // If the assertion fails, the test will fail.\n    // You can provide optional message to \\`assert\\`:\n    assert sum(2, 2) == 4, '2 + 2 should be 4'\n}\n\n// Other functions can be used in tests too.\nfn hello() string {\n    return 'Hello world'\n}\n\nfn sum(a int, b int) int {\n\t// oops, this should be \\`a + b\\`\n\treturn a - b\n}\n`,\n        runConfiguration: RunConfigurationType.Test\n    }\n].map((example: IExample) => {\n    example.code = example.code\n        .trim()\n        .replace(/^ {4}/gm, \"\\t\") + \"\\n\";\n\n    return example\n})\n\n// language=V\nexport const codeIfSharedLinkBroken = `\n// Oops, the shared link is broken.\n// Please recheck the link and try again.\nprintln('Hello, link 404!')\n`.trimStart()\n", "import {CodeRepository, LocalCodeRepository, SharedCodeRepository} from \"../Repositories\"\nimport {Terminal} from \"../Terminal/Terminal\"\nimport {ITheme} from \"../themes/interface\"\nimport {codeIfSharedLinkBroken} from \"../Examples/examples\"\n\nexport class Editor {\n    private static readonly FONT_LOCAL_STORAGE_KEY = \"editor-font-size\"\n\n    private wrapperElement: HTMLElement\n    private repository: CodeRepository\n    public editor: CodeMirror.Editor\n    public terminal: Terminal\n\n    constructor(wrapper: HTMLElement, repository: CodeRepository) {\n        const editorConfig = {\n            mode: \"v\",\n            lineNumbers: true,\n            matchBrackets: true,\n            extraKeys: {\n                \"Ctrl-Space\": \"autocomplete\",\n                \"Ctrl-/\": \"toggleComment\",\n            },\n            indentWithTabs: true,\n            indentUnit: 4,\n            autoCloseBrackets: true,\n            showHint: true,\n            lint: {\n                async: true,\n                lintOnChange: true,\n                delay: 20,\n            },\n            toggleLineComment: {\n                indent: true,\n                padding: \" \",\n            },\n            theme: \"dark\",\n        }\n\n        this.wrapperElement = wrapper\n\n        const place = wrapper.querySelector(\"textarea\")!\n        // @ts-ignore\n        this.editor = CodeMirror.fromTextArea(place, editorConfig)\n        this.repository = repository\n        this.repository.getCode((code) => {\n            if (code === SharedCodeRepository.CODE_NOT_FOUND) {\n                // If the code is not found, use default Hello World example.\n                this.setCode(codeIfSharedLinkBroken)\n                this.terminal.write(\"Code for shared link not found.\")\n                return\n            }\n\n            this.setCode(code)\n        })\n\n        const terminalElement = wrapper.querySelector(\".js-terminal\") as HTMLElement\n        if (terminalElement === null || terminalElement === undefined) {\n            throw new Error(\"Terminal not found, please check that terminal inside editor element\")\n        }\n        this.terminal = new Terminal(terminalElement)\n        this.terminal.registerCloseHandler(() => {\n            this.closeTerminal()\n            this.editor.refresh()\n        })\n        this.terminal.registerWriteHandler((_) => {\n            this.openTerminal()\n        })\n        this.terminal.registerFilter((line) => {\n            return !line.trim().startsWith('Failed command')\n        })\n        this.terminal.mount()\n        this.closeTerminal()\n\n        this.initFont()\n    }\n\n    private initFont() {\n        const fontSize = window.localStorage.getItem(Editor.FONT_LOCAL_STORAGE_KEY)\n        if (fontSize !== null) {\n            this.setEditorFontSize(fontSize)\n        }\n    }\n\n    changeEditorFontSize(delta: number) {\n        const cm = document.getElementsByClassName(\"CodeMirror\")[0] as HTMLElement\n        const fontSize = window.getComputedStyle(cm, null).getPropertyValue(\"font-size\")\n        if (fontSize) {\n            const newFontSize = parseInt(fontSize) + delta\n            cm.style.fontSize = newFontSize + \"px\"\n            window.localStorage.setItem(Editor.FONT_LOCAL_STORAGE_KEY, newFontSize.toString())\n            this.editor.refresh()\n        }\n    }\n\n    private setEditorFontSize(size: string) {\n        const cm = document.getElementsByClassName(\"CodeMirror\")[0] as HTMLElement\n        cm.style.fontSize = size + \"px\"\n        this.refresh()\n    }\n\n    public setCode(code: string, preserveCursor: boolean = false) {\n        const cursor = this.editor.getCursor()\n        this.editor.setValue(code)\n        this.repository.saveCode(code)\n\n        if (preserveCursor) {\n            this.editor.setCursor(cursor)\n        }\n    }\n\n    public getCode() {\n        return this.editor.getValue()\n    }\n\n    public saveCode() {\n        const isSharedCodeRepository = this.repository instanceof SharedCodeRepository\n\n        if (isSharedCodeRepository) {\n            this.repository = new LocalCodeRepository()\n        }\n\n        this.repository.saveCode(this.getCode())\n    }\n\n    public openTerminal() {\n        this.wrapperElement.classList.remove(\"closed-terminal\")\n    }\n\n    public closeTerminal() {\n        this.wrapperElement.classList.add(\"closed-terminal\")\n    }\n\n    public setTheme(theme: ITheme) {\n        this.editor.setOption(\"theme\", theme.name())\n    }\n\n    public showCompletion() {\n       this.editor.execCommand(\"autocomplete\")\n    }\n\n    public refresh() {\n        this.editor.refresh()\n    }\n}\n", "import { ITheme } from \"./interface\";\n\nexport class Dark implements ITheme {\n    name(): string {\n        return \"dark\"\n    }\n}\n", "import { ITheme } from \"./interface\";\n\nexport class Light implements ITheme {\n    name(): string {\n        return \"light\"\n    }\n}\n", "import { QueryParams } from \"../QueryParams\";\nimport { ITheme, Dark, Light } from \"../themes\";\n\ntype ThemeCallback = (newTheme: ITheme) => void;\n\n/**\n * ThemeManager is responsible for managing the theme of the playground.\n * It will register a callback to the change theme button and will update the\n * theme when the user clicks on the button.\n * It will also update the theme when the user changes the theme in the URL.\n *\n * @param queryParams The query params of the URL.\n * @param changeThemeButton The button to change the theme or null.\n *\n * @example\n * const changeThemeButton = document.querySelector('.js-change-theme')\n * const queryParams = new QueryParams(window.location.search);\n * const themeManager = new ThemeManager(queryParams, changeThemeButton)\n *\n * themeManager.registerOnChange((theme) => {\n *   // Do something with the theme\n * })\n */\nexport class ThemeManager {\n    private static readonly QUERY_PARAM_NAME = \"theme\"\n    private static readonly LOCAL_STORAGE_KEY = \"theme\"\n\n    private themes: ITheme[] = [new Dark(), new Light()]\n    private currentTheme: ITheme | null = null\n    private onChange: ThemeCallback[] = []\n    private readonly queryParams: QueryParams\n    private readonly changeThemeButton: Element | null = null\n    private readonly predefinedTheme: ITheme | null = null\n    private fromQueryParam: boolean = false\n\n    constructor(queryParams: QueryParams, predefinedTheme: ITheme | null = null) {\n        this.queryParams = queryParams\n        this.predefinedTheme = predefinedTheme\n        this.changeThemeButton = document.querySelector(\".js-change-theme__action\")\n    }\n\n    public registerOnChange(callback: ThemeCallback): void {\n        this.onChange.push(callback)\n    }\n\n    public loadTheme(): void {\n        const themeFromQuery = this.queryParams.getURLParameter(ThemeManager.QUERY_PARAM_NAME)\n        if (themeFromQuery !== null && themeFromQuery !== undefined) {\n            this.fromQueryParam = true\n            const theme = this.findTheme(themeFromQuery)\n            this.turnTheme(theme)\n            return\n        }\n\n        const themeFromLocalStorage = window.localStorage.getItem(ThemeManager.LOCAL_STORAGE_KEY)\n        if (themeFromLocalStorage !== null && themeFromLocalStorage !== undefined) {\n            const theme = this.findTheme(themeFromLocalStorage)\n            this.turnTheme(theme)\n            return\n        }\n\n        if (this.predefinedTheme !== null && this.predefinedTheme !== undefined) {\n            this.turnTheme(this.predefinedTheme)\n            return\n        }\n\n        // By default, we turn the dark theme.\n        this.turnTheme(new Dark())\n    }\n\n    private findTheme(themeFromLocalStorage: string) {\n        let foundThemes = this.themes.filter(theme => theme.name() === themeFromLocalStorage)\n        let theme = foundThemes[0]\n        if (foundThemes.length == 0) {\n            theme = new Dark()\n        }\n        return theme\n    }\n\n    private turnTheme(theme: ITheme): void {\n        this.currentTheme = theme\n        this.onChange.forEach(callback => callback(theme))\n\n        if (this.changeThemeButton !== null) {\n            const svgSun = this.changeThemeButton.querySelector(\".sun\") as HTMLElement\n            const svgMoon = this.changeThemeButton.querySelector(\".moon\") as HTMLElement\n            if (theme.name() === \"dark\") {\n                svgSun.style.display = \"block\"\n                svgMoon.style.display = \"none\"\n            } else {\n                svgSun.style.display = \"none\"\n                svgMoon.style.display = \"block\"\n            }\n        }\n\n        const html = document.querySelector(\"html\")!\n        html.setAttribute(\"data-theme\", theme.name())\n\n        if (!this.fromQueryParam) {\n            // Don't update saved theme state if we're loading from query param.\n            window.localStorage.setItem(ThemeManager.LOCAL_STORAGE_KEY, theme.name())\n        }\n\n        if (this.fromQueryParam) {\n            // We update the query param only if we loaded from it.\n            // If we don't change, then the user can change the theme and then reload the page.\n            // In this case, the page will load with the theme from the URL, and the user\n            // will think that his theme change has not been saved (and will not be saved\n            // until he removes the theme from the URL).\n            // To avoid this, we update the URL if the user changes theme.\n            this.queryParams.updateURLParameter(ThemeManager.QUERY_PARAM_NAME, theme.name())\n        }\n    }\n\n    public turnDarkTheme(): void {\n        this.turnTheme(new Dark())\n    }\n\n    public turnLightTheme(): void {\n        this.turnTheme(new Light())\n    }\n\n    public toggleTheme(): void {\n        if (!this.currentTheme) {\n            return\n        }\n\n        if (this.currentTheme.name() === \"light\") {\n            this.turnDarkTheme()\n        } else {\n            this.turnLightTheme()\n        }\n    }\n}\n", "import { IExample, examples } from \"./examples\";\n\nexport class ExamplesManager {\n    private readonly selectElement: HTMLElement\n    private onSelectHandler: ((example: IExample) => void) | null = null\n\n    constructor() {\n        this.selectElement = document.querySelector(\".js-examples__select\") as HTMLElement\n    }\n\n    public registerOnSelectHandler(handler: (example: IExample) => void) {\n        this.onSelectHandler = handler\n    }\n\n    public mount() {\n        if (this.selectElement === null || this.selectElement === undefined) {\n            return\n        }\n\n        const examplesSelectList = this.selectElement.querySelector(\".dropdown__list\")\n        const examplesButton = this.selectElement.querySelector(\".dropdown__button\")\n\n        if (examplesSelectList !== null && examplesButton !== null) {\n            examples.forEach(function (example: IExample, index: number) {\n                examplesSelectList.innerHTML += ExamplesManager.exampleElementListTemplate(example.name, index)\n            })\n\n            examplesButton.innerHTML = examples[0].name\n        }\n\n        const dropdownItems = this.selectElement.querySelectorAll<HTMLElement>(\".dropdown__list-item\")\n        dropdownItems.forEach((option: HTMLElement) => {\n            option.addEventListener(\"click\", () => {\n                const exampleName = option.innerText\n                const example = examples.find((example) => {\n                    return example.name === exampleName\n                })\n\n                if (this.onSelectHandler !== null && example) {\n                    this.onSelectHandler(example)\n                }\n            })\n        })\n\n        const dropdownBtn = this.selectElement.querySelector<HTMLElement>(\".dropdown__button\")!\n        const dropdownList = this.selectElement.querySelector<HTMLElement>(\".dropdown__list\")!\n        const dropdownInput = this.selectElement.querySelector<HTMLInputElement>(\".dropdown__input_hidden\")!\n\n        dropdownBtn.addEventListener(\"click\", function () {\n            dropdownList.classList.toggle(\"dropdown__list_visible\")\n            this.classList.toggle(\"dropdown__button_active\")\n        })\n\n        dropdownItems.forEach(function (option: HTMLElement) {\n            option.addEventListener(\"click\", function (e) {\n                dropdownItems.forEach(function (el) {\n                    el.classList.remove(\"dropdown__list-item_active\")\n                })\n                const target = e.target as HTMLElement\n                target.classList.add(\"dropdown__list-item_active\")\n                dropdownBtn.innerText = this.innerText\n                dropdownInput.value = this.dataset.value ?? \"\"\n                dropdownList.classList.remove(\"dropdown__list_visible\")\n            })\n        })\n\n        document.addEventListener(\"click\", function (e) {\n            if (e.target !== dropdownBtn) {\n                dropdownBtn.classList.remove(\"dropdown__button_active\")\n                dropdownList.classList.remove(\"dropdown__list_visible\")\n            }\n        })\n\n        document.addEventListener(\"keydown\", function (e) {\n            if (e.key === \"Tab\" || e.key === \"Escape\") {\n                dropdownBtn.classList.remove(\"dropdown__button_active\")\n                dropdownList.classList.remove(\"dropdown__list_visible\")\n            }\n        })\n    }\n\n    static exampleElementListTemplate = function (name: string, index: number) {\n        let className = \"\"\n        if (index === 0) {\n            className = \"dropdown__list-item_active\"\n        }\n        return `\n<li class=\"dropdown__list-item ${className}\" data-value=\"${name}\">${name}</li>\n`\n    }\n}\n", "type RunCodeResult = {\n    ok: boolean\n    output: string\n}\n\ntype FormatCodeResult = {\n    ok: boolean\n    output: string\n}\n\nexport class ShareCodeResult {\n    constructor(public hash: string) {\n    }\n}\n\n/**\n * CodeRunner describes how to run, format and share code.\n */\nexport class CodeRunner {\n    public static runCode(code: string): Promise<RunCodeResult> {\n        const data = new FormData()\n        data.append(\"code\", code)\n\n        return fetch(\"/run\", {\n            method: \"post\",\n            body: data,\n        })\n            .then(resp => {\n                if (resp.status != 200) {\n                    throw new Error(\"Can't run code\")\n                }\n\n                return resp\n            })\n            .then(resp => resp.json())\n            .then(data => JSON.parse(data) as RunCodeResult)\n    }\n\n    public static runTest(code: string): Promise<RunCodeResult> {\n        const data = new FormData()\n        data.append(\"code\", code)\n\n        return fetch(\"/run_test\", {\n            method: \"post\",\n            body: data,\n        })\n            .then(resp => {\n                if (resp.status != 200) {\n                    throw new Error(\"Can't run test\")\n                }\n\n                return resp\n            })\n            .then(resp => resp.json())\n            .then(data => JSON.parse(data) as RunCodeResult)\n    }\n\n    public static formatCode(code: string): Promise<FormatCodeResult> {\n        const data = new FormData()\n        data.append(\"code\", code)\n\n        return fetch(\"/format\", {\n            method: \"post\",\n            body: data,\n        })\n            .then(resp => resp.json())\n            .then(data => JSON.parse(data) as FormatCodeResult)\n    }\n\n    public static shareCode(code: string): Promise<ShareCodeResult> {\n        const data = new FormData()\n        data.append(\"code\", code)\n\n        return fetch(\"/share\", {\n            method: \"post\",\n            body: data,\n        })\n            .then(resp => {\n                if (resp.status != 200) {\n                    throw new Error(\"Can't share code\")\n                }\n\n                return resp.text()\n            })\n            .then(hash => new ShareCodeResult(hash))\n    }\n}\n", "import { CodeRepository, CodeRepositoryManager, SharedCodeRepository } from \"./Repositories\";\nimport { QueryParams } from \"./QueryParams\";\nimport { HelpManager } from \"./HelpManager\";\nimport { ITheme } from \"./themes\";\nimport { IExample } from \"./Examples\";\nimport { copyTextToClipboard } from \"./clipboard_util\";\n\nimport { Editor } from \"./Editor/Editor\";\nimport { ThemeManager } from \"./ThemeManager/ThemeManager\"\nimport { ExamplesManager } from \"./Examples/ExamplesManager\";\nimport { RunConfigurationManager } from \"./RunConfigurationManager/RunConfigurationManager\";\nimport { CodeRunner, ShareCodeResult } from \"./CodeRunner/CodeRunner\";\n\n/**\n * PlaygroundDefaultAction describes the default action of a playground.\n */\nexport enum PlaygroundDefaultAction {\n    RUN = \"run\",\n    FORMAT = \"format\",\n    SHARE = \"share\",\n    CHANGE_THEME = \"change-theme\",\n}\n\nconst CODE_UNSAVED_KEY = \"unsaved\";\n\n/**\n * Playground is responsible for managing the all playground.\n */\nexport class Playground {\n    private runAsTestConsumer: () => boolean = () => false\n    private readonly queryParams: QueryParams\n    private readonly repository: CodeRepository\n    private readonly editor: Editor\n    private readonly themeManager: ThemeManager\n    private readonly examplesManager: ExamplesManager\n    private readonly helpManager: HelpManager\n    private readonly runConfigurationManager: RunConfigurationManager\n\n    /**\n     * @param editorElement - The element that will contain the playground.\n     */\n    constructor(editorElement: HTMLElement) {\n        this.queryParams = new QueryParams(window.location.search)\n        this.repository = CodeRepositoryManager.selectRepository(this.queryParams)\n        this.editor = new Editor(editorElement, this.repository)\n\n        this.themeManager = new ThemeManager(this.queryParams)\n        this.themeManager.registerOnChange((theme: ITheme): void => {\n            this.editor.setTheme(theme)\n        })\n        this.themeManager.loadTheme()\n\n        this.examplesManager = new ExamplesManager()\n        this.examplesManager.registerOnSelectHandler((example: IExample): void => {\n            this.editor.setCode(example.code)\n            this.runConfigurationManager.useConfiguration(example.runConfiguration)\n        })\n        this.examplesManager.mount()\n\n        this.helpManager = new HelpManager(editorElement)\n\n        this.runConfigurationManager = new RunConfigurationManager(this.queryParams)\n        this.runConfigurationManager.registerOnChange((): void => {})\n        this.runConfigurationManager.registerOnSelect((): void => {\n            this.runConfigurationManager.toggleConfigurationsList()\n            this.run()\n        })\n        this.runConfigurationManager.setupConfiguration()\n    }\n\n    public registerRunAsTestConsumer(consumer: () => boolean): void {\n        this.runAsTestConsumer = consumer\n    }\n\n    /**\n     * Register a handler for the default or new action.\n     * @param name - The name of the action.\n     * @param callback - The callback to be called when the action is triggered.\n     */\n    public registerAction(name: PlaygroundDefaultAction | string, callback: () => void): void {\n        const actionButton = document.getElementsByClassName(`js-${name}__action`)[0]\n        if (actionButton === undefined) {\n            throw new Error(`Can't find action button with class js-${name}__action`)\n        }\n\n        actionButton.addEventListener(\"click\", callback)\n    }\n\n    public run(): void {\n        if (this.runAsTestConsumer()) {\n            this.runTest()\n            return\n        }\n\n        this.runCode()\n    }\n\n    public runCode(): void {\n        this.clearTerminal()\n        this.writeToTerminal(\"Running code...\")\n\n        const code = this.editor.getCode()\n        CodeRunner.runCode(code)\n            .then(result => {\n                this.clearTerminal()\n                this.writeToTerminal(result.output)\n            })\n            .catch(err => {\n                console.log(err)\n                this.writeToTerminal(\"Can't run code. Please try again.\")\n            })\n    }\n\n    public runTest(): void {\n        this.clearTerminal()\n        this.writeToTerminal(\"Running tests...\")\n\n        const code = this.editor.getCode()\n        CodeRunner.runTest(code)\n            .then(result => {\n                this.clearTerminal()\n                this.writeToTerminal(result.output)\n            })\n            .catch(err => {\n                console.log(err)\n                this.writeToTerminal(\"Can't run tests. Please try again.\")\n            })\n    }\n\n    public formatCode(): void {\n        this.clearTerminal()\n        this.writeToTerminal(\"Formatting code...\")\n\n        const code = this.editor.getCode()\n        CodeRunner.formatCode(code)\n            .then(result => {\n                if (!result.ok) {\n                    this.clearTerminal()\n                    this.writeToTerminal(result.output)\n                    return\n                }\n\n                this.editor.setCode(result.output, true)\n                this.writeToTerminal(\"Code formatted successfully!\")\n            })\n            .catch(err => {\n                console.log(err)\n                this.writeToTerminal(\"Can't format code. Please try again.\")\n            })\n    }\n\n    public shareCode(): void {\n        this.clearTerminal()\n\n        const code = this.editor.getCode()\n        CodeRunner.shareCode(code)\n            .then(result => {\n                this.writeToTerminal(\"Code shared successfully!\")\n\n                this.queryParams.updateURLParameter(SharedCodeRepository.QUERY_PARAM_NAME, result.hash)\n\n                const link = this.buildShareLink(result)\n                this.writeToTerminal(\"Share link: \" + link)\n\n                copyTextToClipboard(link, () => {\n                    this.writeToTerminal(\"\\nLink copied to clipboard.\")\n                })\n\n                this.writeToTerminal(\"Note: current page has changed its own URL, it now links to shared code.\")\n            })\n            .catch(err => {\n                console.log(err)\n                this.writeToTerminal(\"Can't share code. Please try again.\")\n            })\n    }\n\n    private buildShareLink(result: ShareCodeResult) {\n        let url = window.location.href.split(\"?\")[0]\n        if (!url.endsWith(\"/\")) {\n            url += \"/\"\n        }\n        return url + \"p/\" + result.hash\n    }\n\n    public changeTheme(): void {\n        this.themeManager.toggleTheme()\n    }\n\n    public setupShortcuts(): void {\n        this.editor.editor.on(\"keypress\",  (cm, event) => {\n            if (!cm.state.completionActive && // Enables keyboard navigation in autocomplete list\n                event.key.length === 1 && event.key.match(/[a-z0-9]/i)) { // Only letters and numbers trigger autocomplete\n                this.editor.showCompletion()\n            }\n        });\n\n        document.addEventListener(\"keydown\", ev => {\n            const isCodeFromShareURL = this.repository instanceof SharedCodeRepository\n\n            if (isCodeFromShareURL && !ev.ctrlKey && !ev.metaKey) {\n                this.markCodeAsUnsaved()\n            }\n\n            const isCtrlEnter = ev.ctrlKey && ev.key === \"Enter\"\n            const isCtrlR = ev.ctrlKey && ev.key === \"r\"\n            const isShiftEnter = ev.shiftKey && ev.key === \"Enter\"\n\n            if (isCtrlEnter || isCtrlR || isShiftEnter) {\n                this.run()\n                ev.preventDefault()\n            } else if (ev.ctrlKey && ev.key === \"l\") {\n                this.formatCode()\n                ev.preventDefault()\n            } else if (ev.ctrlKey && ev.key === \"=\") {\n                this.editor.changeEditorFontSize(1)\n                ev.preventDefault()\n            } else if (ev.ctrlKey && ev.key === \"-\") {\n                this.editor.changeEditorFontSize(-1)\n                ev.preventDefault()\n            } else if (ev.ctrlKey && ev.key === \"i\") {\n                this.helpManager.toggleHelp()\n                ev.preventDefault()\n            } else if ((ev.ctrlKey || ev.metaKey) && ev.key === \"s\") {\n                this.editor.saveCode()\n                ev.preventDefault()\n            } else if (ev.key === \"Escape\") {\n                this.helpManager.closeHelp()\n                ev.preventDefault()\n            } else {\n                this.editor.saveCode()\n            }\n        })\n    }\n\n    public askLoadUnsavedCode() {\n        const isCodeFromShareURL = this.repository instanceof SharedCodeRepository\n        const hasUnsavedCode = window.localStorage.getItem(CODE_UNSAVED_KEY) != null\n\n        window.localStorage.removeItem(CODE_UNSAVED_KEY)\n\n        if (isCodeFromShareURL && hasUnsavedCode) {\n            const yes = confirm(\"You have previously unsaved changes. Do you want to load it?\")\n\n            if (yes) {\n                this.queryParams.updateURLParameter(SharedCodeRepository.QUERY_PARAM_NAME, null)\n                window.location.reload()\n            }\n        }\n    }\n\n    public clearTerminal(): void {\n        this.editor.terminal.clear()\n    }\n\n    public writeToTerminal(text: string): void {\n        this.editor.terminal.write(text)\n    }\n\n    private markCodeAsUnsaved() {\n        window.localStorage.setItem(CODE_UNSAVED_KEY, \"\")\n    }\n}\n", "import \"./v\"\nimport \"./v-hint\"\n\nimport { Playground, PlaygroundDefaultAction } from \"./Playground\"\n\nconst editorElement = document.querySelector('.js-playground') as HTMLElement\nconst playground = new Playground(editorElement)\n\nplayground.registerAction(PlaygroundDefaultAction.RUN, () => {\n    playground.run()\n})\n\nplayground.registerAction(PlaygroundDefaultAction.FORMAT, () => {\n    playground.formatCode()\n})\n\nplayground.registerAction(PlaygroundDefaultAction.SHARE, () => {\n    playground.shareCode()\n})\n\nplayground.registerAction(PlaygroundDefaultAction.CHANGE_THEME, () => {\n    playground.changeTheme()\n})\n\nplayground.registerRunAsTestConsumer(() => {\n    const runButton = document.querySelector('.js-run__action') as HTMLButtonElement;\n    const configurationType = runButton.getAttribute(\"data-type\");\n    return configurationType === \"Test\"\n})\n\nplayground.setupShortcuts()\nplayground.askLoadUnsavedCode()\n\nwindow.onload = () => {\n    const html = document.querySelector(\"html\") as HTMLElement;\n    html.style.opacity = '1'\n}\n"],
  "mappings": ";;;;;;AAIA,MAAM,MAAM,WAAW;AAmCvB,MAAM,cAAc;AAAA,IAChB;AAAA,IACA;AAAA,IAAa;AAAA,IACb;AAAA,IAAO;AAAA,IAAa;AAAA,IAAY;AAAA,IAAW;AAAA,IAC3C;AAAA,IAAU;AAAA,IAAa;AAAA,IAAM;AAAA,IAC7B;AAAA,IAAY;AAAA,IACZ;AAAA,IAAQ;AAAA,IACR;AAAA,IAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IAAM;AAAA,IACN;AAAA,IACA;AAAA,IAAQ;AAAA,IAAS;AAAA,IACjB;AAAA,IACA;AAAA,IAAO;AAAA,IACP;AAAA,IAAM;AAAA,IAAU;AAAA,IAChB;AAAA,IAAQ;AAAA,IAAY;AAAA,IAAS;AAAA,IAC7B;AAAA,IAAU;AAAA,IAAS;AAAA,IAAU;AAAA,IAAQ;AAAA,IAAW;AAAA,IAAW;AAAA,IAAQ;AAAA,IACnE;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAChB;AAAA,IAAK;AAAA,IACL;AAAA,EACJ;AAEA,MAAM,iBAAiB;AAAA,IACnB;AAAA,IAAU;AAAA,IAAU;AAAA,IAAY;AAAA,IAAQ;AAAA,IACxC;AAAA,IAAU;AAAA,IAAc;AAAA,IAAQ;AAAA,IAAW;AAAA,IAAW;AAAA,IACtD;AAAA,IAAuB;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAAY;AAAA,IAAY;AAAA,IAAW;AAAA,IAC1E;AAAA,IAAO;AAAA,IAAS;AAAA,IAAc;AAAA,IAAoB;AAAA,IAAU;AAAA,EAChE;AAEA,MAAM,OAAO;AAEN,MAAM,yBAAyB,IAAI,OAAO,KAAK,eAAe,KAAK,GAAG,MAAM;AAGnF,MAAM,WAAW,IAAI,SAAS;AACvB,MAAM,iCAAiC,IAAI,OAAO,IAAI,YAAY;AAGlE,MAAM,wCAAwC,IAAI,OAAO,KAAK,eAAe,KAAK,GAAG,gBAAgB;AAGrG,MAAM,2BAA2B,IAAI,OAAO,MAAM,uBAAuB;AAGzE,MAAM,qBAAqB,IAAI,OAAO,OAAO,YAAY;AAEhE,WAAS,0BAA0B,QAA2C;AAtF9E;AAwFI,QAAI,UAAmB,CAAC;AAExB,UAAM,MAAM,OAAO,UAAU;AAC7B,QAAI,QAAQ,OAAO,WAAW,GAAG;AAEjC,UAAM,eAAe,oBAAI,IAAY;AACrC,aAAS,IAAI,GAAG,IAAI,KAAK,IAAI,OAAO,UAAU,GAAG,EAAE,GAAG,KAAK;AACvD,YAAMA,cAAa,OAAO,cAAc,CAAC,EAAE,OAAO,SAAO,IAAI,QAAQ,IAAI;AACzE,UAAIA,YAAW,SAAS,KAAKA,YAAW,CAAC,EAAE,WAAW,UAAU;AAC5D,qBAAa,IAAIA,YAAWA,YAAW,SAAS,CAAC,EAAE,MAAM;AAAA,MAC7D;AAAA,IACJ;AAEA,UAAM,aAAa,OAAO,cAAc,IAAI,IAAI;AAChD,QAAI,WAAW,SAAS,KAAK,WAAW,CAAC,EAAE,WAAW,UAAU;AAG5D,cAAQ,KAAK,WAAW,CAAC,CAAC;AAAA,IAC9B;AAEA,UAAM,MAAM,MAAM,OAAO;AACzB,UAAM,YAAY,OAAO,WAAW,IAAI,IAAI,MAAM,IAAI,KAAK,GAAG,CAAC;AAC/D,QAAI,MAAM,WAAW,KAAK;AACtB,cAAQ,KAAK,KAAK;AAAA,IACtB;AACA,QAAI,UAAU,WAAW,KAAK;AAC1B,cAAQ,KAAK,SAAS;AAAA,IAC1B;AAEA,QAAI,yBAAyB,MAAK,WAAM,SAAN,YAAc,EAAE;AAAG,aAAO;AAG5D,QAAI,CAAC,YAAY,KAAK,MAAM,MAAM,GAAG;AACjC,cAAQ;AAAA,QACJ,OAAO,IAAI;AAAA,QAAI,KAAK,IAAI;AAAA,QAAI,QAAQ;AAAA,QAAI,OAAO,MAAM;AAAA,QACrD,MAAM,MAAM,WAAW,MAAM,aAAa;AAAA,MAC9C;AAAA,IACJ,WAAW,MAAM,MAAM,IAAI,IAAI;AAC3B,YAAM,MAAM,IAAI;AAChB,YAAM,SAAS,MAAM,OAAO,MAAM,GAAG,IAAI,KAAK,MAAM,KAAK;AAAA,IAC7D;AAEA,WAAO;AAAA,MACH,MAAM,eAAe,OAAO,cAAc,OAAO;AAAA,MACjD,MAAM,IAAI,IAAI,MAAM,MAAM,KAAK;AAAA,MAC/B,IAAI,IAAI,IAAI,MAAM,MAAM,GAAG;AAAA,IAC/B;AAAA,EACJ;AAjDS;AAmDT,WAAS,eAAe,OAAc,cAA2B,SAAuC;AACpG,UAAM,WAAgC,CAAC;AACvC,UAAM,aAAa,MAAM;AAEzB,aAAS,qBAAqB,SAA4B;AACtD,YAAM,cAAc,QAAQ;AAG5B,UAAI,CAAC,YAAY,WAAW,UAAU,GAAG;AACrC;AAAA,MACJ;AAEA,YAAM,kBAAkB,SAAS,KAAK,CAAC,MAAM,EAAE,SAAS,WAAW;AACnE,UAAI,CAAC,iBAAiB;AAClB,iBAAS,KAAK,OAAO;AAAA,MACzB;AAAA,IACJ;AAZS;AAcT,QAAI,WAAW,QAAQ,QAAQ;AAC3B,YAAM,YAAY,QAAQ,IAAI;AAC9B,UAAI,cAAc,QAAW;AACzB,YAAI,UAAU,SAAS,aAAa,UAAU,WAAW,UAAU;AAC/D,sBAAY,QAAQ,CAAC,SAAS;AAC1B,iCAAqB;AAAA,cACjB;AAAA,cACA,aAAa;AAAA,cACb,WAAW;AAAA,YACf,CAAC;AAAA,UACL,CAAC;AACD,iBAAO;AAAA,QACX;AAGA,YAAI,UAAU,WAAW,KAAK;AAC1B,iBAAO,CAAC;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAEA,iBAAa,QAAQ,CAAC,SAAS;AAC3B,2BAAqB;AAAA,QACjB;AAAA,QACA,aAAa;AAAA,QACb,WAAW;AAAA,MACf,CAAC;AAAA,IACL,CAAC;AAED,aAAS,QAAQ,CAAC,SAAS;AACvB,2BAAqB;AAAA,QACjB,MAAM,OAAO;AAAA,QACb,aAAa;AAAA,QACb,WAAW;AAAA,MACf,CAAC;AAAA,IACL,CAAC;AAED,mBAAe,QAAQ,CAAC,SAAS;AAC7B,2BAAqB;AAAA,QACjB,MAAM,OAAO;AAAA,QACb,aAAa;AAAA,QACb,WAAW;AAAA,MACf,CAAC;AAAA,IACL,CAAC;AAED,UAAM,QAAQ,CAAC,SAAS;AACpB,2BAAqB;AAAA,QACjB;AAAA,QACA,aAAa;AAAA,QACb,WAAW;AAAA,MACf,CAAC;AAAA,IACL,CAAC;AAED,iBAAa,QAAQ,CAAC,SAAS;AAC3B,2BAAqB;AAAA,QACjB;AAAA,QACA,aAAa;AAAA,QACb,WAAW;AAAA,MACf,CAAC;AAAA,IACL,CAAC;AAED,WAAO;AAAA,EACX;AAhFS;AAkFT,MAAM,aAAa,wBAAC,WAAmB,0BAA0B,MAAM,GAApD;AAGnB,aAAW,eAAe,QAAQ,KAAK,UAAU;;;AC/LjD,MAAM,UAAN,MAAc;AAAA,IACV,YACW,aACA,QACA,MACA,OACA,MAAgB;AAJhB;AACA;AACA;AACA;AACA;AAMX;AAAA;AAAA;AAAA,0BAAwB;AAMxB;AAAA;AAAA;AAAA;AAAA,yBAA4B;AAM5B;AAAA;AAAA;AAAA;AAAA,gCAA8B;AAM9B;AAAA;AAAA;AAAA;AAAA,0BAA4B,oBAAI,IAAI;AAAA,IAvBpC;AAAA,EAwBJ;AA/BM;AAiCC,MAAM,WAAwB,oBAAI,IAAY;AAAA,IACjD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AAEM,MAAM,iBAA8B,oBAAI,IAAY;AAAA,IACvD;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AAEM,MAAM,QAAqB,oBAAI,IAAY;AAAA,IAC9C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AAEM,MAAM,eAA4B,oBAAI,IAAY;AAAA,IACrD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AAGD,aAAW,WAAW,KAAK,CAAC,WAAiD;AArJ7E;AAsJI,UAAM,cAAa,YAAO,eAAP,YAAqB;AAExC,UAAM,iBAAiB;AAEvB,QAAI,UAAyB;AAE7B,aAAS,cAAc,QAA8B;AACjD,aAAO,SAAS,mBAAmB;AACnC,aAAO,OAAO,QAAQ;AAAA,IAC1B;AAHS;AAKT,aAAS,UAAU,QAAsB,OAAiC;AACtE,YAAM,KAAK,OAAO,KAAK;AACvB,UAAI,OAAO,MAAM;AACb,eAAO;AAAA,MACX;AAEA,UAAI,MAAM,QAAQ,gBAAgB,OAAO,KAAK;AAC1C,eAAO,IAAI,GAAG;AACd,cAAM,WAAW,YAAY,MAAM,QAAQ,WAAW;AACtD,eAAO;AAAA,MACX;AAEA,UAAI,OAAO,OAAQ,OAAO,OAAO,OAAO,KAAK;AACzC,cAAM,WAAW,YAAY,EAAE;AAC/B,eAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,MACvC;AAEA,UAAI,OAAO,KAAK;AACZ,YAAI,CAAC,OAAO,MAAM,4BAA4B,GAAG;AAC7C,iBAAO;AAAA,QACX;AAAA,MACJ;AAMA,UAAI,OAAO,KAAK;AAEZ,YAAI,OAAO,MAAM,sBAAsB,GAAG;AACtC,iBAAO;AAAA,QACX;AAGA,YAAI,OAAO,MAAM,8BAA8B,GAAG;AAC9C,iBAAO;AAAA,QACX;AAGA,YAAI,OAAO,MAAM,qCAAqC,GAAG;AACrD,iBAAO;AAAA,QACX;AAIA,YAAI,OAAO,MAAM,wBAAwB,GAAG;AACxC,iBAAO;AAAA,QACX;AAGA,YAAI,OAAO,MAAM,kBAAkB,GAAG;AAClC,iBAAO;AAAA,QACX;AAAA,MACJ;AAEA,UAAI,QAAQ,KAAK,EAAE,GAAG;AAClB,YAAI,OAAO,KAAK;AACZ,iBAAO,MAAM,oBAAoB,KACjC,OAAO,MAAM,WAAW,KACxB,OAAO,MAAM,WAAW;AAAA,QAC5B,OAAO;AACH,iBAAO,MAAM,wCAAwC;AAAA,QACzD;AACA,eAAO;AAAA,MACX;AACA,UAAI,iBAAiB,KAAK,EAAE,GAAG;AAC3B,kBAAU;AACV,eAAO;AAAA,MACX;AACA,UAAI,OAAO,KAAK;AACZ,YAAI,OAAO,IAAI,GAAG,GAAG;AACjB,gBAAM,WAAW;AACjB,iBAAO,aAAa,QAAQ,KAAK;AAAA,QACrC;AACA,YAAI,OAAO,IAAI,GAAG,GAAG;AACjB,iBAAO,UAAU;AACjB,iBAAO;AAAA,QACX;AAAA,MACJ;AACA,UAAI,eAAe,KAAK,EAAE,GAAG;AACzB,eAAO,SAAS,cAAc;AAC9B,eAAO;AAAA,MACX;AAEA,UAAI,OAAO,KAAK;AACZ,sBAAc,MAAM;AACpB,eAAO;AAAA,MACX;AAEA,UAAI,OAAO,KAAK;AACZ,cAAM,QAAQ,cAAc,MAAM,EAAE,MAAM,CAAC;AAC3C,YAAI,SAAS,IAAI,KAAK,GAAG;AACrB,iBAAO;AAAA,QACX;AAEA,eAAO;AAAA,MACX;AAEA,aAAO,OAAO,CAAC;AACf,YAAM,SAAS,OAAO,KAAK,MAAM;AACjC,aAAO,KAAK;AAEZ,YAAM,MAAM,cAAc,MAAM;AAChC,UAAI,QAAQ,UAAU;AAClB,cAAM,QAAQ,qBAAqB;AAAA,MACvC;AAEA,UAAI,SAAS,IAAI,GAAG;AAAG,eAAO;AAC9B,UAAI,eAAe,IAAI,GAAG;AAAG,eAAO;AACpC,UAAI,MAAM,IAAI,GAAG;AAAG,eAAO;AAC3B,UAAI,aAAa,IAAI,GAAG;AAAG,eAAO;AAElC,UAAI,IAAI,SAAS,KAAK,IAAI,CAAC,EAAE,YAAY,MAAM,IAAI,CAAC,GAAG;AACnD,eAAO;AAAA,MACX;AAEA,YAAM,OAAO,OAAO,KAAK;AACzB,UAAI,SAAS,OAAO,SAAS,KAAK;AAC9B,eAAO;AAAA,MACX;AAEA,UAAI,SAAS,KAAK;AACd,eAAO,KAAK;AACZ,cAAM,QAAQ,OAAO,KAAK;AAC1B,eAAO,OAAO,CAAC;AACf,YAAI,SAAS,QAAQ,MAAM,MAAM,QAAQ,GAAG;AACxC,iBAAO;AAAA,QACX;AAAA,MACJ;AAEA,UAAI,QAAQ;AACR,eAAO;AAAA,MACX;AAMA,UAAI,MAAM,QAAQ,sBAAsB,OAAO,KAAK,KAAK,KAAK;AAC1D,cAAM,QAAQ,qBAAqB;AACnC,YAAI,MAAM,QAAQ,iBAAiB,QAAW;AAC1C,gBAAM,QAAQ,eAAe,oBAAI,IAAI;AAAA,QACzC;AACA,cAAM,QAAQ,aAAa,IAAI,GAAG;AAClC,eAAO;AAAA,MACX;AASA,UAAI,MAAM,QAAQ,aAAa,IAAI,GAAG,KAAK,OAAO,KAAK,KAAK,KAAK;AAC7D,eAAO;AAAA,MACX;AAEA,aAAO;AAAA,IACX;AA/JS;AAiKT,aAAS,uBAAuB,QAAsB,OAAkB;AACpE,UAAI,OAAO,MAAM,GAAG,GAAG;AACnB,cAAM,WAAW,YAAY,MAAM,QAAQ,WAAW;AACtD,eAAO;AAAA,MACX;AACA,YAAM,WAAW;AACjB,aAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,IACvC;AAPS;AAST,aAAS,wBAAwB,QAAsB,OAAkB;AACrE,YAAM,KAAK,OAAO,KAAK;AACvB,UAAI,OAAO,KAAK;AACZ,cAAM,WAAW,YAAY,MAAM,QAAQ,WAAW;AACtD,eAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,MACvC;AACA,UAAI,OAAO,KAAK;AACZ,eAAO;AAAA,MACX;AAEA,YAAM,QAAQ,cAAc,MAAM;AAClC,UAAI,MAAM,CAAC,EAAE,YAAY,MAAM,MAAM,CAAC,EAAE,YAAY,GAAG;AACnD,cAAM,WAAW,YAAY,MAAM,QAAQ,WAAW;AACtD,eAAO,MAAM,SAAS,QAAQ,KAAK;AAAA,MACvC;AAEA,YAAM,OAAO,OAAO,KAAK;AACzB,aAAO,OAAO,CAAC;AACf,UAAI,SAAS,KAAK;AACd,cAAM,WAAW;AAAA,MACrB,OAAO;AACH,cAAM,WAAW,YAAY,MAAM,QAAQ,WAAW;AAAA,MAC1D;AAEA,aAAO;AAAA,IACX;AAzBS;AA2BT,aAAS,uBAAuB,QAAsB,OAAkB;AACpE,UAAI,OAAO,OAAO,KAAK;AACvB,UAAI,SAAS,OAAO,OAAO,IAAI,GAAG,GAAG;AACjC,cAAM,WAAW;AACjB,eAAO;AAAA,MACX;AACA,UAAI,SAAS,KAAK;AACd,cAAM,WAAW;AACjB,eAAO;AAAA,MACX;AAEA,aAAO;AAAA,IACX;AAZS;AAcT,aAAS,YAAY,OAAqB;AACtC,aAAO,SAAU,QAAsB,OAAkB;AACrD,cAAM,QAAQ,eAAe;AAC7B,cAAM,QAAQ,cAAc;AAE5B,YAAI,OAAsB;AAC1B,YAAI,UAAU;AACd,YAAI,MAAM;AAEV,gBAAQ,OAAO,OAAO,KAAK,MAAM,MAAM;AACnC,cAAI,SAAS,SAAS,CAAC,SAAS;AAC5B,kBAAM;AACN;AAAA,UACJ;AACA,cAAI,SAAS,OAAO,CAAC,WAAW,OAAO,IAAI,GAAG,GAAG;AAC7C,kBAAM,WAAW;AACjB,mBAAO,OAAO,CAAC;AACf,mBAAO;AAAA,UACX;AACA,cAAI,SAAS,OAAO,CAAC,SAAS;AAC1B,kBAAM,WAAW;AACjB,mBAAO,OAAO,CAAC;AACf,mBAAO;AAAA,UACX;AACA,oBAAU,CAAC,WAAW,SAAS;AAAA,QACnC;AAEA,YAAI,OAAO,SAAS;AAChB,gBAAM,WAAW;AAAA,QACrB;AAEA,cAAM,QAAQ,eAAe;AAC7B,cAAM,QAAQ,cAAc;AAC5B,eAAO;AAAA,MACX;AAAA,IACJ;AAnCS;AAqCT,aAAS,aAAa,QAAsB,OAAkB;AAC1D,UAAI,WAAW;AACf,UAAI;AACJ,aAAO,KAAK,OAAO,KAAK,GAAG;AACvB,YAAI,OAAO,OAAO,UAAU;AACxB,gBAAM,WAAW;AACjB;AAAA,QACJ;AACA,mBAAY,OAAO;AAAA,MACvB;AACA,aAAO;AAAA,IACX;AAXS;AAaT,aAAS,YAAY,OAAkB,QAAgB,MAAc;AACjE,aAAO,MAAM,UAAU,IAAI,QAAQ,MAAM,WAAW,QAAQ,MAAM,MAAM,MAAM,OAAO;AAAA,IACzF;AAFS;AAIT,aAAS,WAAW,OAAkB;AAClC,UAAI,CAAC,MAAM,QAAQ;AAAM;AACzB,YAAM,IAAI,MAAM,QAAQ;AACxB,UAAI,MAAM,OAAO,MAAM,OAAO,MAAM;AAChC,cAAM,YAAY,MAAM,QAAQ;AACpC,YAAM,UAAU,MAAM,QAAQ;AAC9B,aAAO,MAAM;AAAA,IACjB;AAPS;AAST,WAAO;AAAA,MACH,YAAY,WAAuB;AAC/B,eAAO;AAAA,UACH,UAAU;AAAA,UACV,SAAS,IAAI,QAAQ,GAAG,GAAG,OAAO,KAAK;AAAA,UACvC,WAAW;AAAA,UACX,aAAa;AAAA,QACjB;AAAA,MACJ;AAAA,MAEA,OAAO,SAAU,QAAsB,OAAiC;AACpE,cAAM,MAAM,MAAM;AAClB,YAAI,OAAO,IAAI,GAAG;AACd,cAAI,IAAI,SAAS,MAAM;AACnB,gBAAI,QAAQ;AAAA,UAChB;AACA,gBAAM,YAAY,OAAO,YAAY;AACrC,gBAAM,cAAc;AAAA,QACxB;AACA,YAAI,OAAO,SAAS,GAAG;AACnB,iBAAO;AAAA,QACX;AACA,kBAAU;AACV,cAAM,SAAS,MAAM,YAAY,WAAW,QAAQ,KAAK;AACzD,YAAI,UAAU,WAAW;AACrB,iBAAO;AAAA,QACX;AACA,YAAI,IAAI,SAAS,MAAM;AACnB,cAAI,QAAQ;AAAA,QAChB;AAEA,YAAI,YAAY;AAAK,sBAAY,OAAO,OAAO,OAAO,GAAG,GAAG;AAAA,iBACnD,YAAY;AAAK,sBAAY,OAAO,OAAO,OAAO,GAAG,GAAG;AAAA,iBACxD,YAAY;AAAK,sBAAY,OAAO,OAAO,OAAO,GAAG,GAAG;AAAA,iBACxD,YAAY,OAAO,IAAI,SAAS;AAAK,qBAAW,KAAK;AAAA,iBACrD,YAAY,IAAI;AAAM,qBAAW,KAAK;AAC/C,cAAM,cAAc;AACpB,eAAO;AAAA,MACX;AAAA,MAEA,QAAQ,SAAU,OAAkB,WAA2B;AAC3D,YAAI,MAAM,aAAa,aAAa,MAAM,YAAY,MAAM;AACxD,iBAAO;AAAA,QACX;AAEA,YAAI,MAAM,QAAQ,QAAQ,OAAO;AAC7B,iBAAO;AAAA,QACX;AAEA,cAAM,MAAM,MAAM;AAClB,cAAM,YAAY,UAAU,OAAO,CAAC;AAEpC,cAAM,UAAU,cAAc,IAAI;AAClC,YAAI,IAAI,OAAO;AACX,iBAAO,IAAI,UAAU,UAAU,IAAI;AAAA,QACvC;AAEA,eAAO,IAAI,eAAe,UAAU,IAAI;AAAA,MAC5C;AAAA;AAAA,MAGA,eAAe;AAAA;AAAA,MAEf,eAAe;AAAA,MACf,MAAM;AAAA,MACN,mBAAmB;AAAA,MACnB,iBAAiB;AAAA,MACjB,aAAa;AAAA,IACjB;AAAA,EACJ,CAAC;AAGD,aAAW,WAAW,YAAY,GAAG;;;ACtf9B,MAAM,uBAAN,MAAqD;AAAA,IAMxD,YAAY,MAAc;AACtB,WAAK,OAAO;AAAA,IAChB;AAAA,IAEA,SAAS,GAAW;AAAA,IAEpB;AAAA,IAEA,QAAQ,SAAiC;AACrC,aAAO,KAAK,cAAc,OAAO;AAAA,IACrC;AAAA,IAEQ,cAAc,SAAiC;AACnD,YAAM,OAAO,IAAI,SAAS;AAC1B,WAAK,OAAO,QAAQ,KAAK,IAAI;AAE7B,YAAM,UAAU;AAAA,QACZ,QAAQ;AAAA,QACR,MAAM;AAAA,MACV,CAAC,EACI,KAAK,UAAQ,KAAK,KAAK,CAAC,EACxB,KAAK,CAAAC,UAAQ;AACV,gBAAQA,KAAI;AAAA,MAChB,CAAC,EACA,MAAM,SAAO;AACV,gBAAQ,IAAI,GAAG;AAAA,MACnB,CAAC;AAAA,IACT;AAAA,EACJ;AAlCa;AACT,EADS,qBACc,mBAAmB;AAC1C,EAFS,qBAEc,iBAAiB;;;ACLrC,MAAM,qBAAN,MAAmD;AAAA,IACtD,YAAoB,MAAc;AAAd;AAAA,IACpB;AAAA,IAEA,SAAS,GAAiB;AAAA,IAC1B;AAAA,IAEA,QAAQ,SAAuC;AAC3C,cAAQ,KAAK,IAAI;AAAA,IACrB;AAAA,EACJ;AAVa;;;ACGN,MAAM,uBAAN,MAAoD;AAAA,IAqBvD,SAAS,MAAc;AACnB,aAAO,aAAa,QAAQ,qBAAoB,mBAAmB,IAAI;AAAA,IAC3E;AAAA,IAEA,QAAQ,SAAiC;AACrC,YAAM,YAAY,OAAO,aAAa,QAAQ,qBAAoB,iBAAiB;AACnF,UAAI,cAAc,QAAQ,cAAc,QAAW;AAC/C,gBAAQ,qBAAoB,YAAY;AACxC;AAAA,MACJ;AACA,cAAQ,SAAS;AAAA,IACrB;AAAA,EACJ;AAjCO,MAAM,sBAAN;AAAM;AACT,EADS,oBACe,oBAAoB;AAG5C;AAAA,EAJS,oBAIc,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAexC,UAAU;;;ACtBL,MAAM,uBAAN,MAAqD;AAAA,IAIxD,YAAoB,MAAc;AAAd;AAChB,WAAK,cAAc,KAAK,IAAI;AAAA,IAChC;AAAA,IAEA,SAAS,GAAiB;AAAA,IAC1B;AAAA,IAEA,QAAQ,SAAuC;AAC3C,cAAQ,KAAK,WAAW;AAAA,IAC5B;AAAA,EACJ;AAda;AACT,EADS,qBACc,mBAAmB;;;ACDvC,MAAM,2BAAN,MAAyD;AAAA,IAG5D,YAAoB,IAAY;AAAZ;AAAA,IACpB;AAAA,IAEA,SAAS,GAAiB;AAAA,IAC1B;AAAA,IAEA,QAAQ,SAAuC;AAC3C,YAAM,kCAAkC,KAAK,IAAI;AAAA,QAC7C,QAAQ;AAAA,QACR,SAAS;AAAA,UACL,gBAAgB;AAAA,QACpB;AAAA,MACJ,CAAC,EACI,KAAK,UAAQ,KAAK,KAAK,CAAC,EACxB,KAAK,UAAQ;AACV,cAAM,QAAQ,KAAK;AACnB,cAAM,WAAW,OAAO,KAAK,KAAK,EAAE,CAAC;AACrC,cAAM,OAAO,MAAM,QAAQ;AAC3B,cAAM,MAAM,KAAK;AAEjB,cAAM,KAAK;AAAA,UACP,QAAQ;AAAA,UACR,SAAS;AAAA,YACL,gBAAgB;AAAA,UACpB;AAAA,QACJ,CAAC,EACI,KAAK,OAAK,EAAE,KAAK,CAAC,EAClB,KAAK,OAAK;AACP,kBAAQ,CAAC;AAAA,QACb,CAAC,EACA,MAAM,SAAO;AACV,kBAAQ,IAAI,GAAG;AAAA,QACnB,CAAC;AAAA,MACT,CAAC,EACA,MAAM,SAAO;AACV,gBAAQ,IAAI,GAAG;AAAA,MACnB,CAAC;AAAA,IACT;AAAA,EACJ;AAzCa;AACT,EADS,yBACc,mBAAmB;;;ACUvC,MAAM,wBAAN,MAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAS/B,OAAO,iBAAiB,QAAqB,QAA2C;AACpF,UAAI,WAAW,UAAa,OAAO,aAAa,QAAQ,OAAO,aAAa,QAAW;AACnF,eAAO,IAAI,qBAAqB,OAAO,QAAQ;AAAA,MACnD;AAEA,UAAI,WAAW,UAAa,OAAO,SAAS,QAAQ,OAAO,SAAS,QAAW;AAC3E,eAAO,IAAI,mBAAmB,OAAO,IAAI;AAAA,MAC7C;AAEA,UAAI,WAAW,UAAa,OAAO,UAAU,QAAQ,OAAO,UAAU,UAAa,OAAO,OAAO;AAE7F,eAAO,IAAI,mBAAmB,EAAE;AAAA,MACpC;AAEA,YAAM,aAAa,IAAI,oBAAoB;AAC3C,YAAM,OAAO,OAAO,gBAAgB,qBAAqB,gBAAgB;AACzE,UAAI,SAAS,QAAQ,SAAS,QAAW;AACrC,eAAO,IAAI,qBAAqB,IAAI;AAAA,MACxC;AAEA,YAAM,aAAa,OAAO,gBAAgB,qBAAqB,gBAAgB;AAC/E,UAAI,eAAe,QAAQ,eAAe,QAAW;AACjD,eAAO,IAAI,qBAAqB,UAAU;AAAA,MAC9C;AAEA,YAAM,SAAS,OAAO,gBAAgB,yBAAyB,gBAAgB;AAC/E,UAAI,WAAW,QAAQ,WAAW,QAAW;AACzC,eAAO,IAAI,yBAAyB,MAAM;AAAA,MAC9C;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AAzCa;;;ACJN,MAAM,cAAN,MAAkB;AAAA;AAAA;AAAA;AAAA,IAMrB,YAAY,MAAc;AACtB,WAAK,SAAS,IAAI,gBAAgB,IAAI;AAAA,IAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOO,mBAAmB,OAAe,OAAsB;AAC3D,YAAM,MAAM,YAAY,mBAAmB,OAAO,SAAS,MAAM,OAAO,KAAK;AAC7E,aAAO,QAAQ,aAAa,CAAC,GAAG,IAAI,GAAG;AAAA,IAC3C;AAAA,IAEO,gBAAgB,OAA8B;AACjD,aAAO,KAAK,OAAO,IAAI,KAAK;AAAA,IAChC;AAAA,IAEA,OAAe,mBAAmB,KAAa,OAAe,OAAsB;AAChF,YAAM,YAAY,IAAI,IAAI,GAAG;AAE7B,UAAI,OAAO;AACP,kBAAU,aAAa,IAAI,OAAO,KAAK;AAAA,MAC3C,OAAO;AACH,kBAAU,aAAa,OAAO,KAAK;AAAA,MACvC;AAEA,aAAO,UAAU,SAAS;AAAA,IAC9B;AAAA,EACJ;AAnCa;;;ACTN,MAAM,eAAN,MAAkB;AAAA,IAWrB,YAAY,mBAAgC;AACxC,WAAK,oBAAoB;AACzB,WAAK,UAAU,kBAAkB,uBAAuB,iBAAiB,EAAE,CAAC;AAE5E,UAAI,KAAK,YAAY,QAAQ,KAAK,YAAY,QAAW;AACrD;AAAA,MACJ;AAEA,WAAK,cAAc,KAAK,QAAQ,cAAc,kBAAkB;AAChE,WAAK,iBAAiB,KAAK,QAAQ,cAAc,eAAe;AAChE,WAAK,kBAAkB,KAAK,QAAQ,cAAc,gBAAgB;AAElE,WAAK,MAAM;AAAA,IACf;AAAA,IAEQ,QAAQ;AACZ,UAAI,KAAK,mBAAmB,QAAW;AACnC,aAAK,eAAe,iBAAiB,SAAS,MAAM;AAChD,eAAK,WAAW;AAAA,QACpB,CAAC;AAAA,MACL;AAEA,UAAI,KAAK,gBAAgB,QAAW;AAChC,aAAK,YAAY,iBAAiB,SAAS,MAAM;AAC7C,eAAK,WAAW;AAAA,QACpB,CAAC;AAAA,MACL;AAEA,UAAI,KAAK,oBAAoB,QAAW;AACpC,aAAK,gBAAgB,iBAAiB,SAAS,MAAM;AACjD,eAAK,WAAW;AAAA,QACpB,CAAC;AAAA,MACL;AAKA,UAAI,CAAC,aAAY,OAAO;AACpB,cAAM,YAAY,SAAS,iBAA8B,uBAAuB;AAChF,kBAAU,QAAQ,SAAU,UAAuB;AAC/C,mBAAS,YAAY;AAAA,QACzB,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,IAEO,YAAY;AACf,UAAI,CAAC,KAAK,YAAY,UAAU,SAAS,QAAQ,GAAG;AAChD;AAAA,MACJ;AACA,WAAK,WAAW;AAAA,IACpB;AAAA,IAEO,aAAa;AAChB,YAAM,OAAO,KAAK,kBAAkB,uBAAuB,SAAS,EAAE,CAAC;AACvE,WAAK,UAAU,OAAO,QAAQ;AAC9B,WAAK,YAAY,UAAU,OAAO,QAAQ;AAAA,IAC9C;AAAA,EACJ;AApEO,MAAM,cAAN;AAAM;AAGT;AAAA;AAAA,EAHS,YAGF,QAAQ,UAAU,SAAS,YAAY,EAAE,QAAQ,KAAK,KAAK;;;ACHtE,WAAS,4BAA4B,MAAoB;AACrD,UAAM,WAAW,SAAS,cAAc,UAAU;AAClD,aAAS,QAAQ;AAGjB,aAAS,MAAM,MAAM;AACrB,aAAS,MAAM,OAAO;AACtB,aAAS,MAAM,WAAW;AAE1B,aAAS,KAAK,YAAY,QAAQ;AAClC,aAAS,MAAM;AACf,aAAS,OAAO;AAEhB,QAAI;AAEA,YAAM,aAAa,SAAS,YAAY,MAAM;AAC9C,YAAM,MAAM,aAAa,eAAe;AACxC,cAAQ,IAAI,wCAAwC,GAAG;AAAA,IAC3D,SAAS,KAAP;AACE,cAAQ,IAAI,kCAAkC,GAAG;AAAA,IACrD;AAEA,aAAS,KAAK,YAAY,QAAQ;AAAA,EACtC;AAvBS;AAyBF,WAAS,oBAAoB,MAAc,QAA0B;AACxE,QAAI,CAAC,UAAU,WAAW;AACtB,kCAA4B,IAAI;AAChC;AAAA,IACJ;AACA,cAAU,UAAU,UAAU,IAAI,EAAE,KAAK,WAAY;AACjD,cAAQ,IAAI,6CAA6C;AACzD,aAAO;AAAA,IACX,GAAG,SAAU,KAAK;AACd,kCAA4B,IAAI;AAChC,cAAQ,IAAI,gCAAgC,KAAK,wBAAwB;AAAA,IAC7E,CAAC;AAAA,EACL;AAZgB;;;ACrBT,MAAM,WAAN,MAAe;AAAA,IAMlB,YAAY,SAAsB;AAJlC,WAAQ,UAAkC;AAC1C,WAAQ,UAAkC;AAC1C,WAAQ,UAA4B,CAAC;AAGjC,WAAK,UAAU;AACf,WAAK,oBAAoB,OAAO;AAAA,IACpC;AAAA,IAEO,qBAAqB,SAAqB;AAC7C,WAAK,UAAU;AAAA,IACnB;AAAA,IAEO,qBAAqB,SAAiC;AACzD,WAAK,UAAU;AAAA,IACnB;AAAA,IAEO,eAAe,QAAwB;AAC1C,WAAK,QAAQ,KAAK,MAAM;AAAA,IAC5B;AAAA,IAEO,MAAM,MAAc;AACvB,YAAM,QAAQ,KAAK,MAAM,IAAI;AAC7B,YAAM,gBAAgB,KAAK,yBAAyB;AACpD,YAAM,gBAAgB,MAAM,OAAO,UAAQ,KAAK,QAAQ,MAAM,YAAU,OAAO,IAAI,CAAC,CAAC;AACrF,YAAM,UAAU,cAAc,KAAK,IAAI;AACvC,oBAAc,aAAa,UAAU;AAErC,UAAI,KAAK,YAAY,MAAM;AACvB,aAAK,QAAQ,IAAI;AAAA,MACrB;AAAA,IACJ;AAAA,IAEO,QAAQ;AACX,WAAK,yBAAyB,EAAE,YAAY;AAAA,IAChD;AAAA,IAEO,QAAQ;AACX,YAAM,cAAc,KAAK,QAAQ,cAAc,4BAA4B;AAC3E,UAAI,gBAAgB,QAAQ,gBAAgB,UAAa,KAAK,YAAY,MAAM;AAC5E;AAAA,MACJ;AAEA,kBAAY,iBAAiB,SAAS,KAAK,OAAO;AAAA,IACtD;AAAA,IAEQ,2BAAwC;AAC5C,aAAO,KAAK,QAAQ,cAAc,sBAAsB;AAAA,IAC5D;AAAA,IAEQ,oBAAoB,SAAsB;AAC9C,YAAM,SAAS,QAAQ,cAAc,SAAS;AAC9C,UAAI,CAAC;AAAQ;AAEb,UAAI,YAAY;AAChB,aAAO,iBAAiB,aAAa,MAAM;AACvC,oBAAY;AACZ,iBAAS,KAAK,UAAU,IAAI,UAAU;AAAA,MAC1C,CAAC;AAED,eAAS,iBAAiB,aAAa,CAAC,MAAkB;AACtD,YAAI,CAAC;AAAW;AAChB,gBAAQ,MAAM,SAAS,GAAG,SAAS,KAAK,eAAe,KAAK,EAAE,UAAU,OAAO,eAAe;AAAA,MAClG,CAAC;AAED,eAAS,iBAAiB,WAAW,MAAM;AACvC,oBAAY;AACZ,iBAAS,KAAK,UAAU,OAAO,UAAU;AAAA,MAC7C,CAAC;AAAA,IACL;AAAA,EACJ;AAxEa;;;ACDN,MAAK,uBAAL,kBAAKC,0BAAL;AACH,IAAAA,sBAAA,SAAM;AACN,IAAAA,sBAAA,UAAO;AAFC,WAAAA;AAAA,KAAA;AAKZ,WAAS,gCAAgC,sBAAoD;AACzF,YAAQ,sBAAsB;AAAA,MAC1B,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX;AACI,cAAM,IAAI,MAAM,mCAAmC,sBAAsB;AAAA,IACjF;AAAA,EACJ;AATS;AAWF,MAAM,2BAAN,MAA8B;AAAA,IAiBjC,YAAY,aAA0B;AAZtC,WAAQ,uBAA6C;AACrD,WAAQ,iBAA0B;AAElC,WAAiB,YAAY,SAAS,cAAc,iBAAiB;AACrE,WAAiB,iBAAiB,SAAS,cAAc,wBAAwB;AACjF,WAAiB,gBAAgB,SAAS,cAAc,qBAAqB;AAC7E,WAAiB,qBAAqB,SAAS,cAAc,6BAA6B;AAC1F,WAAiB,iBAAiB,SAAS,iBAAiB,mBAAmB;AAE/E,WAAQ,WAAiD,6BAAM;AAAA,MAAC,GAAP;AACzD,WAAQ,WAAiD,6BAAM;AAAA,MAAC,GAAP;AAGrD,WAAK,cAAc;AAEnB,WAAK,MAAM;AAAA,IACf;AAAA,IAEO,iBAAiB,UAAsD;AAC1E,WAAK,WAAW;AAAA,IACpB;AAAA,IAEO,iBAAiB,UAAsD;AAC1E,WAAK,WAAW;AAAA,IACpB;AAAA,IAEO,2BAA2B;AAC9B,WAAK,mBAAmB,UAAU,OAAO,QAAQ;AAAA,IACrD;AAAA,IAEO,qBAAqB;AACxB,YAAM,yBAAyB,KAAK,YAAY,gBAAgB,yBAAwB,gBAAgB;AACxG,UAAI,2BAA2B,QAAQ,2BAA2B,QAAW;AACzE,aAAK,iBAAiB;AACtB,aAAK,iBAAiB,gCAAgC,sBAAsB,CAAC;AAC7E;AAAA,MACJ;AAEA,YAAM,gCAAgC,OAAO,aAAa,QAAQ,yBAAwB,iBAAiB;AAC3G,UAAI,kCAAkC,QAAQ,kCAAkC,QAAW;AACvF,aAAK,iBAAiB,gCAAgC,6BAA6B,CAAC;AACpF;AAAA,MACJ;AAEA,WAAK,iBAAiB,eAAwB;AAAA,IAClD;AAAA,IAEO,iBAAiB,sBAA4C;AAChE,WAAK,uBAAuB;AAC5B,WAAK,SAAS,oBAAoB;AAElC,YAAM,2BAA2B,qBAAqB,oBAAoB;AAC1E,WAAK,UAAU,aAAa,aAAa,wBAAwB;AACjE,WAAK,eAAe,cAAc;AAElC,UAAI,CAAC,KAAK,gBAAgB;AAEtB,eAAO,aAAa,QAAQ,yBAAwB,mBAAmB,wBAAwB;AAAA,MACnG;AAEA,UAAI,KAAK,gBAAgB;AAOrB,aAAK,YAAY,mBAAmB,yBAAwB,kBAAkB,wBAAwB;AAAA,MAC1G;AAAA,IACJ;AAAA,IAEQ,QAAQ;AACZ,WAAK,cAAc,iBAAiB,SAAS,MAAM;AAC/C,aAAK,yBAAyB;AAAA,MAClC,CAAC;AAED,WAAK,eAAe,QAAQ,mBAAiB;AACzC,sBAAc,iBAAiB,SAAS,MAAM;AArG1D;AAsGgB,gBAAM,2BAA0B,mBAAc,aAAa,WAAW,MAAtC,YAA2C;AAC3E,gBAAM,oBAAoB,gCAAgC,uBAAuB;AACjF,eAAK,iBAAiB,iBAAiB;AACvC,eAAK,SAAS,iBAAiB;AAAA,QACnC,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA,EACJ;AA1FO,MAAM,0BAAN;AAAM;AACT,EADS,wBACe,mBAAmB;AAC3C,EAFS,wBAEe,oBAAoB;;;ACZzC,MAAM,WAAuB;AAAA,IAChC;AAAA,MACI,MAAM;AAAA,MACN,MAAM,oBAAoB;AAAA,MAC1B;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA;AAAA,MAEN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYN;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA;AAAA,MAEN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA6BN;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA;AAAA,MAEN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA2CN;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA;AAAA,MAEN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA0CN;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA;AAAA,MAEN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAwEN;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA;AAAA,MAEN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA4BN;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA;AAAA,MAEN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA2DN;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA;AAAA,MAEN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAyFN;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA;AAAA,MAEN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkCN;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmDN;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA;AAAA,MAEN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA+CN;AAAA,IACJ;AAAA,IACA;AAAA,MACI,MAAM;AAAA;AAAA,MAEN,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAwBN;AAAA,IACJ;AAAA,EACJ,EAAE,IAAI,CAAC,YAAsB;AACzB,YAAQ,OAAO,QAAQ,KAClB,KAAK,EACL,QAAQ,WAAW,GAAI,IAAI;AAEhC,WAAO;AAAA,EACX,CAAC;AAGM,MAAM,yBAAyB;AAAA;AAAA;AAAA;AAAA,EAIpC,UAAU;;;ACpmBL,MAAM,UAAN,MAAa;AAAA,IAQhB,YAAY,SAAsB,YAA4B;AAC1D,YAAM,eAAe;AAAA,QACjB,MAAM;AAAA,QACN,aAAa;AAAA,QACb,eAAe;AAAA,QACf,WAAW;AAAA,UACP,cAAc;AAAA,UACd,UAAU;AAAA,QACd;AAAA,QACA,gBAAgB;AAAA,QAChB,YAAY;AAAA,QACZ,mBAAmB;AAAA,QACnB,UAAU;AAAA,QACV,MAAM;AAAA,UACF,OAAO;AAAA,UACP,cAAc;AAAA,UACd,OAAO;AAAA,QACX;AAAA,QACA,mBAAmB;AAAA,UACf,QAAQ;AAAA,UACR,SAAS;AAAA,QACb;AAAA,QACA,OAAO;AAAA,MACX;AAEA,WAAK,iBAAiB;AAEtB,YAAM,QAAQ,QAAQ,cAAc,UAAU;AAE9C,WAAK,SAAS,WAAW,aAAa,OAAO,YAAY;AACzD,WAAK,aAAa;AAClB,WAAK,WAAW,QAAQ,CAAC,SAAS;AAC9B,YAAI,SAAS,qBAAqB,gBAAgB;AAE9C,eAAK,QAAQ,sBAAsB;AACnC,eAAK,SAAS,MAAM,iCAAiC;AACrD;AAAA,QACJ;AAEA,aAAK,QAAQ,IAAI;AAAA,MACrB,CAAC;AAED,YAAM,kBAAkB,QAAQ,cAAc,cAAc;AAC5D,UAAI,oBAAoB,QAAQ,oBAAoB,QAAW;AAC3D,cAAM,IAAI,MAAM,sEAAsE;AAAA,MAC1F;AACA,WAAK,WAAW,IAAI,SAAS,eAAe;AAC5C,WAAK,SAAS,qBAAqB,MAAM;AACrC,aAAK,cAAc;AACnB,aAAK,OAAO,QAAQ;AAAA,MACxB,CAAC;AACD,WAAK,SAAS,qBAAqB,CAAC,MAAM;AACtC,aAAK,aAAa;AAAA,MACtB,CAAC;AACD,WAAK,SAAS,eAAe,CAAC,SAAS;AACnC,eAAO,CAAC,KAAK,KAAK,EAAE,WAAW,gBAAgB;AAAA,MACnD,CAAC;AACD,WAAK,SAAS,MAAM;AACpB,WAAK,cAAc;AAEnB,WAAK,SAAS;AAAA,IAClB;AAAA,IAEQ,WAAW;AACf,YAAM,WAAW,OAAO,aAAa,QAAQ,QAAO,sBAAsB;AAC1E,UAAI,aAAa,MAAM;AACnB,aAAK,kBAAkB,QAAQ;AAAA,MACnC;AAAA,IACJ;AAAA,IAEA,qBAAqB,OAAe;AAChC,YAAM,KAAK,SAAS,uBAAuB,YAAY,EAAE,CAAC;AAC1D,YAAM,WAAW,OAAO,iBAAiB,IAAI,IAAI,EAAE,iBAAiB,WAAW;AAC/E,UAAI,UAAU;AACV,cAAM,cAAc,SAAS,QAAQ,IAAI;AACzC,WAAG,MAAM,WAAW,cAAc;AAClC,eAAO,aAAa,QAAQ,QAAO,wBAAwB,YAAY,SAAS,CAAC;AACjF,aAAK,OAAO,QAAQ;AAAA,MACxB;AAAA,IACJ;AAAA,IAEQ,kBAAkB,MAAc;AACpC,YAAM,KAAK,SAAS,uBAAuB,YAAY,EAAE,CAAC;AAC1D,SAAG,MAAM,WAAW,OAAO;AAC3B,WAAK,QAAQ;AAAA,IACjB;AAAA,IAEO,QAAQ,MAAc,iBAA0B,OAAO;AAC1D,YAAM,SAAS,KAAK,OAAO,UAAU;AACrC,WAAK,OAAO,SAAS,IAAI;AACzB,WAAK,WAAW,SAAS,IAAI;AAE7B,UAAI,gBAAgB;AAChB,aAAK,OAAO,UAAU,MAAM;AAAA,MAChC;AAAA,IACJ;AAAA,IAEO,UAAU;AACb,aAAO,KAAK,OAAO,SAAS;AAAA,IAChC;AAAA,IAEO,WAAW;AACd,YAAM,yBAAyB,KAAK,sBAAsB;AAE1D,UAAI,wBAAwB;AACxB,aAAK,aAAa,IAAI,oBAAoB;AAAA,MAC9C;AAEA,WAAK,WAAW,SAAS,KAAK,QAAQ,CAAC;AAAA,IAC3C;AAAA,IAEO,eAAe;AAClB,WAAK,eAAe,UAAU,OAAO,iBAAiB;AAAA,IAC1D;AAAA,IAEO,gBAAgB;AACnB,WAAK,eAAe,UAAU,IAAI,iBAAiB;AAAA,IACvD;AAAA,IAEO,SAAS,OAAe;AAC3B,WAAK,OAAO,UAAU,SAAS,MAAM,KAAK,CAAC;AAAA,IAC/C;AAAA,IAEO,iBAAiB;AACrB,WAAK,OAAO,YAAY,cAAc;AAAA,IACzC;AAAA,IAEO,UAAU;AACb,WAAK,OAAO,QAAQ;AAAA,IACxB;AAAA,EACJ;AA1IO,MAAM,SAAN;AAAM;AACT,EADS,OACe,yBAAyB;;;ACJ9C,MAAM,OAAN,MAA6B;AAAA,IAChC,OAAe;AACX,aAAO;AAAA,IACX;AAAA,EACJ;AAJa;;;ACAN,MAAM,QAAN,MAA8B;AAAA,IACjC,OAAe;AACX,aAAO;AAAA,IACX;AAAA,EACJ;AAJa;;;ACqBN,MAAM,gBAAN,MAAmB;AAAA,IAYtB,YAAY,aAA0B,kBAAiC,MAAM;AAR7E,WAAQ,SAAmB,CAAC,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC;AACnD,WAAQ,eAA8B;AACtC,WAAQ,WAA4B,CAAC;AAErC,WAAiB,oBAAoC;AACrD,WAAiB,kBAAiC;AAClD,WAAQ,iBAA0B;AAG9B,WAAK,cAAc;AACnB,WAAK,kBAAkB;AACvB,WAAK,oBAAoB,SAAS,cAAc,0BAA0B;AAAA,IAC9E;AAAA,IAEO,iBAAiB,UAA+B;AACnD,WAAK,SAAS,KAAK,QAAQ;AAAA,IAC/B;AAAA,IAEO,YAAkB;AACrB,YAAM,iBAAiB,KAAK,YAAY,gBAAgB,cAAa,gBAAgB;AACrF,UAAI,mBAAmB,QAAQ,mBAAmB,QAAW;AACzD,aAAK,iBAAiB;AACtB,cAAM,QAAQ,KAAK,UAAU,cAAc;AAC3C,aAAK,UAAU,KAAK;AACpB;AAAA,MACJ;AAEA,YAAM,wBAAwB,OAAO,aAAa,QAAQ,cAAa,iBAAiB;AACxF,UAAI,0BAA0B,QAAQ,0BAA0B,QAAW;AACvE,cAAM,QAAQ,KAAK,UAAU,qBAAqB;AAClD,aAAK,UAAU,KAAK;AACpB;AAAA,MACJ;AAEA,UAAI,KAAK,oBAAoB,QAAQ,KAAK,oBAAoB,QAAW;AACrE,aAAK,UAAU,KAAK,eAAe;AACnC;AAAA,MACJ;AAGA,WAAK,UAAU,IAAI,KAAK,CAAC;AAAA,IAC7B;AAAA,IAEQ,UAAU,uBAA+B;AAC7C,UAAI,cAAc,KAAK,OAAO,OAAO,CAAAC,WAASA,OAAM,KAAK,MAAM,qBAAqB;AACpF,UAAI,QAAQ,YAAY,CAAC;AACzB,UAAI,YAAY,UAAU,GAAG;AACzB,gBAAQ,IAAI,KAAK;AAAA,MACrB;AACA,aAAO;AAAA,IACX;AAAA,IAEQ,UAAU,OAAqB;AACnC,WAAK,eAAe;AACpB,WAAK,SAAS,QAAQ,cAAY,SAAS,KAAK,CAAC;AAEjD,UAAI,KAAK,sBAAsB,MAAM;AACjC,cAAM,SAAS,KAAK,kBAAkB,cAAc,MAAM;AAC1D,cAAM,UAAU,KAAK,kBAAkB,cAAc,OAAO;AAC5D,YAAI,MAAM,KAAK,MAAM,QAAQ;AACzB,iBAAO,MAAM,UAAU;AACvB,kBAAQ,MAAM,UAAU;AAAA,QAC5B,OAAO;AACH,iBAAO,MAAM,UAAU;AACvB,kBAAQ,MAAM,UAAU;AAAA,QAC5B;AAAA,MACJ;AAEA,YAAM,OAAO,SAAS,cAAc,MAAM;AAC1C,WAAK,aAAa,cAAc,MAAM,KAAK,CAAC;AAE5C,UAAI,CAAC,KAAK,gBAAgB;AAEtB,eAAO,aAAa,QAAQ,cAAa,mBAAmB,MAAM,KAAK,CAAC;AAAA,MAC5E;AAEA,UAAI,KAAK,gBAAgB;AAOrB,aAAK,YAAY,mBAAmB,cAAa,kBAAkB,MAAM,KAAK,CAAC;AAAA,MACnF;AAAA,IACJ;AAAA,IAEO,gBAAsB;AACzB,WAAK,UAAU,IAAI,KAAK,CAAC;AAAA,IAC7B;AAAA,IAEO,iBAAuB;AAC1B,WAAK,UAAU,IAAI,MAAM,CAAC;AAAA,IAC9B;AAAA,IAEO,cAAoB;AACvB,UAAI,CAAC,KAAK,cAAc;AACpB;AAAA,MACJ;AAEA,UAAI,KAAK,aAAa,KAAK,MAAM,SAAS;AACtC,aAAK,cAAc;AAAA,MACvB,OAAO;AACH,aAAK,eAAe;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AA9GO,MAAM,eAAN;AAAM;AACT,EADS,aACe,mBAAmB;AAC3C,EAFS,aAEe,oBAAoB;;;ACvBzC,MAAM,mBAAN,MAAsB;AAAA,IAIzB,cAAc;AAFd,WAAQ,kBAAwD;AAG5D,WAAK,gBAAgB,SAAS,cAAc,sBAAsB;AAAA,IACtE;AAAA,IAEO,wBAAwB,SAAsC;AACjE,WAAK,kBAAkB;AAAA,IAC3B;AAAA,IAEO,QAAQ;AACX,UAAI,KAAK,kBAAkB,QAAQ,KAAK,kBAAkB,QAAW;AACjE;AAAA,MACJ;AAEA,YAAM,qBAAqB,KAAK,cAAc,cAAc,iBAAiB;AAC7E,YAAM,iBAAiB,KAAK,cAAc,cAAc,mBAAmB;AAE3E,UAAI,uBAAuB,QAAQ,mBAAmB,MAAM;AACxD,iBAAS,QAAQ,SAAU,SAAmB,OAAe;AACzD,6BAAmB,aAAa,iBAAgB,2BAA2B,QAAQ,MAAM,KAAK;AAAA,QAClG,CAAC;AAED,uBAAe,YAAY,SAAS,CAAC,EAAE;AAAA,MAC3C;AAEA,YAAM,gBAAgB,KAAK,cAAc,iBAA8B,sBAAsB;AAC7F,oBAAc,QAAQ,CAAC,WAAwB;AAC3C,eAAO,iBAAiB,SAAS,MAAM;AACnC,gBAAM,cAAc,OAAO;AAC3B,gBAAM,UAAU,SAAS,KAAK,CAACC,aAAY;AACvC,mBAAOA,SAAQ,SAAS;AAAA,UAC5B,CAAC;AAED,cAAI,KAAK,oBAAoB,QAAQ,SAAS;AAC1C,iBAAK,gBAAgB,OAAO;AAAA,UAChC;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAED,YAAM,cAAc,KAAK,cAAc,cAA2B,mBAAmB;AACrF,YAAM,eAAe,KAAK,cAAc,cAA2B,iBAAiB;AACpF,YAAM,gBAAgB,KAAK,cAAc,cAAgC,yBAAyB;AAElG,kBAAY,iBAAiB,SAAS,WAAY;AAC9C,qBAAa,UAAU,OAAO,wBAAwB;AACtD,aAAK,UAAU,OAAO,yBAAyB;AAAA,MACnD,CAAC;AAED,oBAAc,QAAQ,SAAU,QAAqB;AACjD,eAAO,iBAAiB,SAAS,SAAU,GAAG;AAtD1D;AAuDgB,wBAAc,QAAQ,SAAU,IAAI;AAChC,eAAG,UAAU,OAAO,4BAA4B;AAAA,UACpD,CAAC;AACD,gBAAM,SAAS,EAAE;AACjB,iBAAO,UAAU,IAAI,4BAA4B;AACjD,sBAAY,YAAY,KAAK;AAC7B,wBAAc,SAAQ,UAAK,QAAQ,UAAb,YAAsB;AAC5C,uBAAa,UAAU,OAAO,wBAAwB;AAAA,QAC1D,CAAC;AAAA,MACL,CAAC;AAED,eAAS,iBAAiB,SAAS,SAAU,GAAG;AAC5C,YAAI,EAAE,WAAW,aAAa;AAC1B,sBAAY,UAAU,OAAO,yBAAyB;AACtD,uBAAa,UAAU,OAAO,wBAAwB;AAAA,QAC1D;AAAA,MACJ,CAAC;AAED,eAAS,iBAAiB,WAAW,SAAU,GAAG;AAC9C,YAAI,EAAE,QAAQ,SAAS,EAAE,QAAQ,UAAU;AACvC,sBAAY,UAAU,OAAO,yBAAyB;AACtD,uBAAa,UAAU,OAAO,wBAAwB;AAAA,QAC1D;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EAWJ;AAxFO,MAAM,kBAAN;AAAM;AA+ET,EA/ES,gBA+EF,6BAA6B,gCAAU,MAAc,OAAe;AACvE,QAAI,YAAY;AAChB,QAAI,UAAU,GAAG;AACb,kBAAY;AAAA,IAChB;AACA,WAAO;AAAA,iCACkB,0BAA0B,SAAS;AAAA;AAAA,EAEhE,GARoC;;;ACvEjC,MAAM,kBAAN,MAAsB;AAAA,IACzB,YAAmB,MAAc;AAAd;AAAA,IACnB;AAAA,EACJ;AAHa;AAQN,MAAM,aAAN,MAAiB;AAAA,IACpB,OAAc,QAAQ,MAAsC;AACxD,YAAM,OAAO,IAAI,SAAS;AAC1B,WAAK,OAAO,QAAQ,IAAI;AAExB,aAAO,MAAM,QAAQ;AAAA,QACjB,QAAQ;AAAA,QACR,MAAM;AAAA,MACV,CAAC,EACI,KAAK,UAAQ;AACV,YAAI,KAAK,UAAU,KAAK;AACpB,gBAAM,IAAI,MAAM,gBAAgB;AAAA,QACpC;AAEA,eAAO;AAAA,MACX,CAAC,EACA,KAAK,UAAQ,KAAK,KAAK,CAAC,EACxB,KAAK,CAAAC,UAAQ,KAAK,MAAMA,KAAI,CAAkB;AAAA,IACvD;AAAA,IAEA,OAAc,QAAQ,MAAsC;AACxD,YAAM,OAAO,IAAI,SAAS;AAC1B,WAAK,OAAO,QAAQ,IAAI;AAExB,aAAO,MAAM,aAAa;AAAA,QACtB,QAAQ;AAAA,QACR,MAAM;AAAA,MACV,CAAC,EACI,KAAK,UAAQ;AACV,YAAI,KAAK,UAAU,KAAK;AACpB,gBAAM,IAAI,MAAM,gBAAgB;AAAA,QACpC;AAEA,eAAO;AAAA,MACX,CAAC,EACA,KAAK,UAAQ,KAAK,KAAK,CAAC,EACxB,KAAK,CAAAA,UAAQ,KAAK,MAAMA,KAAI,CAAkB;AAAA,IACvD;AAAA,IAEA,OAAc,WAAW,MAAyC;AAC9D,YAAM,OAAO,IAAI,SAAS;AAC1B,WAAK,OAAO,QAAQ,IAAI;AAExB,aAAO,MAAM,WAAW;AAAA,QACpB,QAAQ;AAAA,QACR,MAAM;AAAA,MACV,CAAC,EACI,KAAK,UAAQ,KAAK,KAAK,CAAC,EACxB,KAAK,CAAAA,UAAQ,KAAK,MAAMA,KAAI,CAAqB;AAAA,IAC1D;AAAA,IAEA,OAAc,UAAU,MAAwC;AAC5D,YAAM,OAAO,IAAI,SAAS;AAC1B,WAAK,OAAO,QAAQ,IAAI;AAExB,aAAO,MAAM,UAAU;AAAA,QACnB,QAAQ;AAAA,QACR,MAAM;AAAA,MACV,CAAC,EACI,KAAK,UAAQ;AACV,YAAI,KAAK,UAAU,KAAK;AACpB,gBAAM,IAAI,MAAM,kBAAkB;AAAA,QACtC;AAEA,eAAO,KAAK,KAAK;AAAA,MACrB,CAAC,EACA,KAAK,UAAQ,IAAI,gBAAgB,IAAI,CAAC;AAAA,IAC/C;AAAA,EACJ;AApEa;;;ACKb,MAAM,mBAAmB;AAKlB,MAAM,aAAN,MAAiB;AAAA;AAAA;AAAA;AAAA,IAapB,YAAYC,gBAA4B;AAZxC,WAAQ,oBAAmC,6BAAM,OAAN;AAavC,WAAK,cAAc,IAAI,YAAY,OAAO,SAAS,MAAM;AACzD,WAAK,aAAa,sBAAsB,iBAAiB,KAAK,WAAW;AACzE,WAAK,SAAS,IAAI,OAAOA,gBAAe,KAAK,UAAU;AAEvD,WAAK,eAAe,IAAI,aAAa,KAAK,WAAW;AACrD,WAAK,aAAa,iBAAiB,CAAC,UAAwB;AACxD,aAAK,OAAO,SAAS,KAAK;AAAA,MAC9B,CAAC;AACD,WAAK,aAAa,UAAU;AAE5B,WAAK,kBAAkB,IAAI,gBAAgB;AAC3C,WAAK,gBAAgB,wBAAwB,CAAC,YAA4B;AACtE,aAAK,OAAO,QAAQ,QAAQ,IAAI;AAChC,aAAK,wBAAwB,iBAAiB,QAAQ,gBAAgB;AAAA,MAC1E,CAAC;AACD,WAAK,gBAAgB,MAAM;AAE3B,WAAK,cAAc,IAAI,YAAYA,cAAa;AAEhD,WAAK,0BAA0B,IAAI,wBAAwB,KAAK,WAAW;AAC3E,WAAK,wBAAwB,iBAAiB,MAAY;AAAA,MAAC,CAAC;AAC5D,WAAK,wBAAwB,iBAAiB,MAAY;AACtD,aAAK,wBAAwB,yBAAyB;AACtD,aAAK,IAAI;AAAA,MACb,CAAC;AACD,WAAK,wBAAwB,mBAAmB;AAAA,IACpD;AAAA,IAEO,0BAA0B,UAA+B;AAC5D,WAAK,oBAAoB;AAAA,IAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOO,eAAe,MAAwC,UAA4B;AACtF,YAAM,eAAe,SAAS,uBAAuB,MAAM,cAAc,EAAE,CAAC;AAC5E,UAAI,iBAAiB,QAAW;AAC5B,cAAM,IAAI,MAAM,0CAA0C,cAAc;AAAA,MAC5E;AAEA,mBAAa,iBAAiB,SAAS,QAAQ;AAAA,IACnD;AAAA,IAEO,MAAY;AACf,UAAI,KAAK,kBAAkB,GAAG;AAC1B,aAAK,QAAQ;AACb;AAAA,MACJ;AAEA,WAAK,QAAQ;AAAA,IACjB;AAAA,IAEO,UAAgB;AACnB,WAAK,cAAc;AACnB,WAAK,gBAAgB,iBAAiB;AAEtC,YAAM,OAAO,KAAK,OAAO,QAAQ;AACjC,iBAAW,QAAQ,IAAI,EAClB,KAAK,YAAU;AACZ,aAAK,cAAc;AACnB,aAAK,gBAAgB,OAAO,MAAM;AAAA,MACtC,CAAC,EACA,MAAM,SAAO;AACV,gBAAQ,IAAI,GAAG;AACf,aAAK,gBAAgB,mCAAmC;AAAA,MAC5D,CAAC;AAAA,IACT;AAAA,IAEO,UAAgB;AACnB,WAAK,cAAc;AACnB,WAAK,gBAAgB,kBAAkB;AAEvC,YAAM,OAAO,KAAK,OAAO,QAAQ;AACjC,iBAAW,QAAQ,IAAI,EAClB,KAAK,YAAU;AACZ,aAAK,cAAc;AACnB,aAAK,gBAAgB,OAAO,MAAM;AAAA,MACtC,CAAC,EACA,MAAM,SAAO;AACV,gBAAQ,IAAI,GAAG;AACf,aAAK,gBAAgB,oCAAoC;AAAA,MAC7D,CAAC;AAAA,IACT;AAAA,IAEO,aAAmB;AACtB,WAAK,cAAc;AACnB,WAAK,gBAAgB,oBAAoB;AAEzC,YAAM,OAAO,KAAK,OAAO,QAAQ;AACjC,iBAAW,WAAW,IAAI,EACrB,KAAK,YAAU;AACZ,YAAI,CAAC,OAAO,IAAI;AACZ,eAAK,cAAc;AACnB,eAAK,gBAAgB,OAAO,MAAM;AAClC;AAAA,QACJ;AAEA,aAAK,OAAO,QAAQ,OAAO,QAAQ,IAAI;AACvC,aAAK,gBAAgB,8BAA8B;AAAA,MACvD,CAAC,EACA,MAAM,SAAO;AACV,gBAAQ,IAAI,GAAG;AACf,aAAK,gBAAgB,sCAAsC;AAAA,MAC/D,CAAC;AAAA,IACT;AAAA,IAEO,YAAkB;AACrB,WAAK,cAAc;AAEnB,YAAM,OAAO,KAAK,OAAO,QAAQ;AACjC,iBAAW,UAAU,IAAI,EACpB,KAAK,YAAU;AACZ,aAAK,gBAAgB,2BAA2B;AAEhD,aAAK,YAAY,mBAAmB,qBAAqB,kBAAkB,OAAO,IAAI;AAEtF,cAAM,OAAO,KAAK,eAAe,MAAM;AACvC,aAAK,gBAAgB,iBAAiB,IAAI;AAE1C,4BAAoB,MAAM,MAAM;AAC5B,eAAK,gBAAgB,6BAA6B;AAAA,QACtD,CAAC;AAED,aAAK,gBAAgB,0EAA0E;AAAA,MACnG,CAAC,EACA,MAAM,SAAO;AACV,gBAAQ,IAAI,GAAG;AACf,aAAK,gBAAgB,qCAAqC;AAAA,MAC9D,CAAC;AAAA,IACT;AAAA,IAEQ,eAAe,QAAyB;AAC5C,UAAI,MAAM,OAAO,SAAS,KAAK,MAAM,GAAG,EAAE,CAAC;AAC3C,UAAI,CAAC,IAAI,SAAS,GAAG,GAAG;AACpB,eAAO;AAAA,MACX;AACA,aAAO,MAAM,OAAO,OAAO;AAAA,IAC/B;AAAA,IAEO,cAAoB;AACvB,WAAK,aAAa,YAAY;AAAA,IAClC;AAAA,IAEO,iBAAuB;AAC1B,WAAK,OAAO,OAAO,GAAG,YAAa,CAAC,IAAI,UAAU;AAC9C,YAAI,CAAC,GAAG,MAAM;AAAA,QACV,MAAM,IAAI,WAAW,KAAK,MAAM,IAAI,MAAM,WAAW,GAAG;AACxD,eAAK,OAAO,eAAe;AAAA,QAC/B;AAAA,MACJ,CAAC;AAED,eAAS,iBAAiB,WAAW,QAAM;AACvC,cAAM,qBAAqB,KAAK,sBAAsB;AAEtD,YAAI,sBAAsB,CAAC,GAAG,WAAW,CAAC,GAAG,SAAS;AAClD,eAAK,kBAAkB;AAAA,QAC3B;AAEA,cAAM,cAAc,GAAG,WAAW,GAAG,QAAQ;AAC7C,cAAM,UAAU,GAAG,WAAW,GAAG,QAAQ;AACzC,cAAM,eAAe,GAAG,YAAY,GAAG,QAAQ;AAE/C,YAAI,eAAe,WAAW,cAAc;AACxC,eAAK,IAAI;AACT,aAAG,eAAe;AAAA,QACtB,WAAW,GAAG,WAAW,GAAG,QAAQ,KAAK;AACrC,eAAK,WAAW;AAChB,aAAG,eAAe;AAAA,QACtB,WAAW,GAAG,WAAW,GAAG,QAAQ,KAAK;AACrC,eAAK,OAAO,qBAAqB,CAAC;AAClC,aAAG,eAAe;AAAA,QACtB,WAAW,GAAG,WAAW,GAAG,QAAQ,KAAK;AACrC,eAAK,OAAO,qBAAqB,EAAE;AACnC,aAAG,eAAe;AAAA,QACtB,WAAW,GAAG,WAAW,GAAG,QAAQ,KAAK;AACrC,eAAK,YAAY,WAAW;AAC5B,aAAG,eAAe;AAAA,QACtB,YAAY,GAAG,WAAW,GAAG,YAAY,GAAG,QAAQ,KAAK;AACrD,eAAK,OAAO,SAAS;AACrB,aAAG,eAAe;AAAA,QACtB,WAAW,GAAG,QAAQ,UAAU;AAC5B,eAAK,YAAY,UAAU;AAC3B,aAAG,eAAe;AAAA,QACtB,OAAO;AACH,eAAK,OAAO,SAAS;AAAA,QACzB;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IAEO,qBAAqB;AACxB,YAAM,qBAAqB,KAAK,sBAAsB;AACtD,YAAM,iBAAiB,OAAO,aAAa,QAAQ,gBAAgB,KAAK;AAExE,aAAO,aAAa,WAAW,gBAAgB;AAE/C,UAAI,sBAAsB,gBAAgB;AACtC,cAAM,MAAM,QAAQ,8DAA8D;AAElF,YAAI,KAAK;AACL,eAAK,YAAY,mBAAmB,qBAAqB,kBAAkB,IAAI;AAC/E,iBAAO,SAAS,OAAO;AAAA,QAC3B;AAAA,MACJ;AAAA,IACJ;AAAA,IAEO,gBAAsB;AACzB,WAAK,OAAO,SAAS,MAAM;AAAA,IAC/B;AAAA,IAEO,gBAAgB,MAAoB;AACvC,WAAK,OAAO,SAAS,MAAM,IAAI;AAAA,IACnC;AAAA,IAEQ,oBAAoB;AACxB,aAAO,aAAa,QAAQ,kBAAkB,EAAE;AAAA,IACpD;AAAA,EACJ;AAzOa;;;ACvBb,MAAM,gBAAgB,SAAS,cAAc,gBAAgB;AAC7D,MAAM,aAAa,IAAI,WAAW,aAAa;AAE/C,aAAW,gCAA4C,MAAM;AACzD,eAAW,IAAI;AAAA,EACnB,CAAC;AAED,aAAW,sCAA+C,MAAM;AAC5D,eAAW,WAAW;AAAA,EAC1B,CAAC;AAED,aAAW,oCAA8C,MAAM;AAC3D,eAAW,UAAU;AAAA,EACzB,CAAC;AAED,aAAW,kDAAqD,MAAM;AAClE,eAAW,YAAY;AAAA,EAC3B,CAAC;AAED,aAAW,0BAA0B,MAAM;AACvC,UAAM,YAAY,SAAS,cAAc,iBAAiB;AAC1D,UAAM,oBAAoB,UAAU,aAAa,WAAW;AAC5D,WAAO,sBAAsB;AAAA,EACjC,CAAC;AAED,aAAW,eAAe;AAC1B,aAAW,mBAAmB;AAE9B,SAAO,SAAS,MAAM;AAClB,UAAM,OAAO,SAAS,cAAc,MAAM;AAC1C,SAAK,MAAM,UAAU;AAAA,EACzB;",
  "names": ["lineTokens", "data", "RunConfigurationType", "theme", "example", "data", "editorElement"]
}
